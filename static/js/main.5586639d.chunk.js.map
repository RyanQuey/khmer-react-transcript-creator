{"version":3,"sources":["lib/TranscriptEditor/MediaPlayer/ProgressBar.module.css","lib/TranscriptEditor/MediaPlayer/Select.module.css","lib/TranscriptEditor/Settings/index.module.css","lib/TranscriptEditor/MediaPlayer/PlayerControls.module.css","lib/TranscriptEditor/TimedTextEditor/index.module.css","lib/TranscriptEditor/TimedTextEditor/WrapperBlock.module.css","lib/TranscriptEditor/TimedTextEditor/Word.js","lib/TranscriptEditor/TimedTextEditor/SpeakerLabel.js","lib/Util/timecode-converter/secondsToTimecode.js","lib/Util/timecode-converter/timecodeToSeconds.js","lib/Util/timecode-converter/padTimeToTimecode.js","lib/Util/timecode-converter/index.js","lib/Util/khmer-numbers/index.js","lib/TranscriptEditor/TimedTextEditor/WrapperBlock.js","lib/Util/adapters/bbc-kaldi/index.js","lib/Util/adapters/generate-entities-ranges/index.js","lib/Util/adapters/autoEdit2/index.js","lib/Util/adapters/speechmatics/index.js","lib/Util/adapters/index.js","lib/Util/export-adapters/txt/index.js","lib/Util/export-adapters/index.js","lib/TranscriptEditor/TimedTextEditor/index.js","lib/TranscriptEditor/MediaPlayer/VideoPlayer.js","lib/TranscriptEditor/MediaPlayer/VolumeControl.js","lib/TranscriptEditor/MediaPlayer/Select.js","lib/TranscriptEditor/MediaPlayer/PlayerControls.js","lib/TranscriptEditor/MediaPlayer/ProgressBar.js","lib/TranscriptEditor/MediaPlayer/defaultHotKeys.js","lib/TranscriptEditor/MediaPlayer/index.js","lib/TranscriptEditor/Settings/Toggle/index.js","lib/TranscriptEditor/Settings/TimecodeOffset/index.js","lib/TranscriptEditor/Settings/index.js","lib/TranscriptEditor/Settings/Shortcuts.js","lib/TranscriptEditor/index.js","lib/updated-react-speech-recognition/src/index.js","lib/updated-react-speech-recognition/src/SpeechRecognition.js","lib/GenerateTranscript/index.js","select-stt-json-type.js","select-export-format.js","index.js","lib/TranscriptEditor/Settings/Shortcuts.module.css","lib/TranscriptEditor/index.module.css","lib/TranscriptEditor/MediaPlayer/index.module.css","lib/TranscriptEditor/MediaPlayer/VolumeControl.module.css","lib/TranscriptEditor/Settings/TimecodeOffset/index.module.css","index.module.css","lib/TranscriptEditor/Settings/Toggle/index.module.css"],"names":["module","exports","color-light-grey","color-labs-red","bar","selectPlayerControl","settings","header","closeButton","controlsContainer","settingElement","label","rollbackValue","timecodeLabel","color-darkest-grey","playerControls","playerButton","playBackRate","timeBox","currentTime","separator","duration","color-subt-green","DraftEditor-root","editor","help","icon","helpMessage","color-mid-grey","color-dark-grey","WrapperBlock","markers","text","speaker","time","EditLabel","jumpToHere","Word","generateConfidence","data","confidence","generatePreviousTimes","prevTimes","i","start","concat","dec","Math","floor","this","props","block","getData","words","Map","isMap","toJSON","wordsData","react_default","a","createElement","style","display","data-start","data-end","end","data-confidence","data-prev-times","data-entity-key","data-block-key","getKey","className","children","PureComponent","SpeakerLabel","onClick","handleOnClickEdit","title","index_es","faUserEdit","name","secondsToTimecode","seconds","framePerSeconds","fps","undefined","normalisedSeconds","Number","toPrecision","toFixed","normalisePlayerTime","wholeSeconds","frames","_padZero","n","parseInt","timecodeToSecondsHelper","tc","s","split","timecodeToFrames","isOneDigit","str","length","padTimeToTimecode","timecode","includes","includesFullStop","replace","timecodeToSeconds","resultPadded","parseFloat","numberMap","១","២","៣","៤","៥","៦","៧","៨","៩","០","convertToArabicNumbers","num","String","keys","Object","key","RegExp","window","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newSpeakerName","prompt","setState","blockProps","handleAnalyticsEvents","category","action","value","keyForCurrentCurrentBlock","currentBlockSelection","SelectionState","createEmpty","currentBlockSelectionState","EditorState","acceptSelection","editorState","getSelection","newBlockDataWithSpeakerName","newContentState","Modifier","mergeBlockData","contentState","setEditorNewContentState","getPrevStartTime","prevBlock","getBlockBefore","prevBlockStart","get","getEndTime","nextBlock","getBlockAfter","nextBlockStart","handleTimecodeClick","wasPlaying","isPlaying","togglePlayMedia","interval","setInterval","clearInterval","currentBlockTime","currentVideoTime","newStartTime","NaN","endTime","isNaN","alert","List","isList","console","log","newBlockData","newerEditorState","previousBlock","previousBlockSelection","prevBlockSelectionState","prevWordsData","newPrevBlockData","newPrevBlockContentState","getCurrentContent","error","doIt","handleJumpToHereClick","e","preventDefault","onJumpToHereClick","state","timecodeOffset","startTimecode","speakerElement","TimedTextEditor_SpeakerLabel","timecodeElement","slice","contentEditable","showSpeakers","faMapMarker","onMouseDown","showTimecodes","TimedTextEditor_Word","Draft","React","Component","bbcKaldiToDraft","bbcKaldiJson","results","paragraph","forEach","word","push","punct","groupWordsInParagraphs","retval","draftJsContentBlockParagraph","join","type","generateEntitiesRanges","wordAttributeName","position","map","result","offset","random","toString","substring","autoEdit2ToDraft","autoEdit2Json","autoEditText","autoEditparagraph","autoEditLine","line","tmpWord","startTime","test","entityRanges","getSpeaker","speakers","speakerIdx","speechmaticsToDraft","speechmaticsJson","tmpWords","tmpSpeakers","curatedWords","curatePunctuation","element","index","toLowerCase","paragraphStart","sttJsonAdapter","transcriptData","sttJsonType","blocks","entityMap","txt","blockData","x","exportAdapter","exportFormat","JSON","stringify","ext","draftToTxt","TimedTextEditor","KeyBindingUtil","hasCommandModifier","onChange","isPauseWhileTypingOn","playMedia","isEditable","saveTimer","clearTimeout","setTimeout","localSave","mediaUrl","handleDoubleClick","event","nativeEvent","target","hasAttribute","parentElement","t","getAttribute","onWordClick","mediaUrlName","fileName","convertToRaw","localStorage","setItem","newLastLocalSavedDate","Date","getWordCount","wordArray","getPlainText","trim","match","setEditorContentState","convertFromRaw","createWithContent","forceRenderDecorator","newState","newEditorState","customKeyBindingFn","keyCode","altKey","getDefaultKeyBinding","handleKeyCommand","command","splitParagraph","currentSelection","isCollapsed","currentContent","splitBlock","splitState","targetSelection","originalBlock","blockMap","selectionBefore","getStartKey","originalBlockData","blockSpeaker","blockStartTime","originalIsCurrent","getCurrentWord","wordStartTime","wordsDataForNew","fromJS","newBlock","setIn","getText","wordsDataForOld","wordsLeft","afterMergeContentState","newestEditorState","afterMergeContentState2","updateTimecode","renderBlockWithTimecodes","component","editable","settingTimecodeFor","copyCurrentTimeToClipboard","navigator","clipboard","writeText","then","err","checkToScroll","arguments","currentWord","nextWord","next","isScrollIntoViewOn","thisWordElement","document","querySelector","nextWordElement","scrollIntoView","inline","loadData","prevProps","prevState","isPresentInLocalStorage","format","getItem","parse","lastLocalSavedDate","_this2","faMousePointer","faICursor","faKeyboard","faSave","tooltip","es","content","fadeDuration","fadeEasing","placement","radius","faQuestionCircle","round","onDoubleClick","scoped","stripPastedStyles","blockRendererFn","keyBindingFn","cursor","faShareSquare","nextProps","VideoPlayer","id","playsInline","src","onTimeUpdate","data-testid","onLoadedData","onLoadedDataGetDuration","ref","videoRef","VolumeControl","styles","switchContainer","switch","defaultChecked","handleMuteVolume","slider","Select","options","option","currentValue","handleChange","PlayerControls","setIntervalHelperBackward","skipBackward","clearIntervalHelper","setIntervalHelperForward","skipForward","rollback","faUndo","onMouseUp","faBackward","faPause","faPlay","faForward","MediaPlayer_Select","playbackRateOptions","playbackRate","setPlayBackRate","promptSetCurrentTime","handleSaveTranscript","pictureInPicture","faTv","MediaPlayer_VolumeControl","ProgressBar","progress","buttonClick","min","max","returnHotKeys","self","alt+k","priority","handler","displayKeyCombination","alt+l","alt+-","decreasePlaybackRate","alt+=","increasePlaybackRate","alt+u","jumpToStartOfBlock","alt+j","rollBack","alt+t","PLAYBACK_RATES","MediaPlayer","hot_keys","assertThisInitialized","setCurrentTime","newCurrentTime","newCurrentTimeInSeconds","current","readyState","userTimecodeValue","setTimeCodeOffset","newTimeCodeOffSet","rollBackValueInSeconds","tmpDesiredCurrentTime","timedTextEditorRef","handleTimeUpdate","hookOnTimeUpdate","handlePlayBackRateChange","input","slower","reverse","find","newSpeed","faster","handleChangeReplayRollbackValue","volume","paused","pauseMedia","pause","play","bool","handleProgressBarClick","getMediaCurrentTime","handleMediaDurationChange","currentDuration","currentDurationWithOffset","durationInSeconds","mediaDuration","defaultStartTime","handlePictureInPicture","pictureInPictureElement","exitPictureInPicture","catch","requestPictureInPicture","createRef","hotKeys","hookSeek","hookPlayMedia","hookIsPlaying","playingWhileListening","player","MediaPlayer_VideoPlayer","bind","playerControlsSection","controlsSection","titleBox","MediaPlayer_PlayerControls","onSetCurrentTime","onSetTimecodeOffset","progressBar","MediaPlayer_ProgressBar","topSection","playerSection","hotkeys","Toggle","defaultValue","handleToggle","TimecodeOffset","resetTimecodeOffset","handleSetTimecodeOffset","setTimecodeOffset","offsetContainer","inputBox","button","Settings","handleSettingsToggle","faWindowClose","Settings_Toggle","defaultValuePauseWhileTyping","handlePauseWhileTyping","defaultValueScrollSync","handleIsScrollIntoViewChange","defaultRollBackValueInSeconds","handleRollBackValueInSeconds","handleShowTimecodes","handleShowSpeakers","Settings_TimecodeOffset","Shortcuts","hotKeysCheatsheet","shortcut","listItem","shortcutLabel","shortcuts","handleShortcutsToggle","list","urlParams","URLSearchParams","location","search","TranscriptEditor","ifPresentRetrieveTranscriptFromLocalStorage","info","loadLocalSavedData","handlePlayMedia","handleIsPlaying","isChecked","checked","rollBackValue","forceUpdate","showSettings","showShortcuts","getEditorContent","has","lastLocalSavedTime","mediaPlayer","TranscriptEditor_MediaPlayer","foo","TranscriptEditor_Settings","Settings_Shortcuts","timedTextEditor","TranscriptEditor_TimedTextEditor","handleWordClick","container","aside","settingsContainer","settingsButton","faCog","main","SpeechRecognition","SpeechRecognitionInner","WrappedComponent","listening","BrowserSpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","browserSupportsSpeechRecognition","autoStart","pauseAfterDisconnect","interimTranscript","finalTranscript","newTranscriptData","status","wonid","_Component","SpeechRecognitionContainer","minElapsed","now","speechTimerStartedAt","newWordData","wordResults","transcript","allWordData","onRecognitionDisconnect","startListening","updateTranscript","allResults","resultIndex","isFinal","concatTranscripts","resetTranscript","disconnect","DOMException","abortListening","stopListening","inherits","createClass","continuous","interimResults","onresult","onend","disconnectType","abort","stop","_len","transcriptParts","Array","_key","totalTimeElapsed","assign","GenerateTranscript","history","reset","lang","moveFocusToEnd","selection","textWithInsert","insertText","editorWithInsert","insertAtCursor","_this$props","disabled","SttTypeSelect","ExportFormatSelect","App","handleIsTextEditable","isTextEditable","handleSttTypeChange","defineProperty","handleExportFormatChange","exportTranscript","_this$transcriptEdito","transcriptEditorRef","download","filename","contentType","blob","Blob","href","URL","createObjectURL","click","clearLocalStorage","clear","analyticsEvents","toConsumableArray","handleChangeTranscriptName","sttType","startListeningAndPlayingMedia","khmerRougeTranscript","files","file","canPlayType","fileURL","fr","FileReader","onload","evt","readAsText","_this3","rel","lib_GenerateTranscript","handleChangeLoadMedia","handleChangeLoadMediaUrl","select_stt_json_type","handleChangeLoadTranscriptJson","select_export_format","loadDemo","lib_TranscriptEditor","render","src_App","getElementById","color-lightest-grey","helpText","hideInMobile"],"mappings":"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","file":"static/js/main.5586639d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-light-grey\":\"#767676\",\"color-labs-red\":\"#a0372d\",\"bar\":\"ProgressBar_bar__2oR8s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectPlayerControl\":\"Select_selectPlayerControl__1bhyR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__36cRi\",\"header\":\"Settings_header__1UQrp\",\"closeButton\":\"Settings_closeButton__3UXC1\",\"controlsContainer\":\"Settings_controlsContainer__3BtPR\",\"settingElement\":\"Settings_settingElement__24ZWk\",\"label\":\"Settings_label__3IOD9\",\"rollbackValue\":\"Settings_rollbackValue__2Vtb4\",\"timecodeLabel\":\"Settings_timecodeLabel__2D6RZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-darkest-grey\":\"#282828\",\"color-light-grey\":\"#767676\",\"color-labs-red\":\"#a0372d\",\"playerControls\":\"PlayerControls_playerControls__2IcRA\",\"playerButton\":\"PlayerControls_playerButton__3TXyh\",\"playBackRate\":\"PlayerControls_playBackRate__3-fGW\",\"timeBox\":\"PlayerControls_timeBox__12SiC\",\"currentTime\":\"PlayerControls_currentTime__1H51E\",\"separator\":\"PlayerControls_separator__3kRF6\",\"duration\":\"PlayerControls_duration__20Ec5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-subt-green\":\"#69e3c2\",\"color-darkest-grey\":\"#282828\",\"color-labs-red\":\"#a0372d\",\"DraftEditor-root\":\"TimedTextEditor_DraftEditor-root__1MRoQ\",\"editor\":\"TimedTextEditor_editor__28Rgh\",\"help\":\"TimedTextEditor_help__wQVZp\",\"icon\":\"TimedTextEditor_icon__3sQM5\",\"helpMessage\":\"TimedTextEditor_helpMessage__m2UJz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-labs-red\":\"#a0372d\",\"color-light-grey\":\"#767676\",\"color-mid-grey\":\"#696969\",\"color-dark-grey\":\"#4a4a4a\",\"WrapperBlock\":\"WrapperBlock_WrapperBlock__33vJ5\",\"markers\":\"WrapperBlock_markers__2smE9\",\"text\":\"WrapperBlock_text__3ImsJ\",\"speaker\":\"WrapperBlock_speaker__24Q3I\",\"time\":\"WrapperBlock_time__1X0Kt\",\"EditLabel\":\"WrapperBlock_EditLabel__3b0C-\",\"jumpToHere\":\"WrapperBlock_jumpToHere__3wQl3\"};","import React, { PureComponent } from 'react';\nimport { Map, List, fromJS } from 'immutable'\nimport PropTypes from 'prop-types';\n\nclass Word extends PureComponent {\n  generateConfidence = (data) => {\n    // handling edge case where confidence score not present\n    if (data.confidence) {\n      return data.confidence > 0.6 ? 'high' : 'low';\n    }\n\n    return 'high';\n  }\n\n  generatePreviousTimes = (data) => {\n    let prevTimes = '';\n\n    for (let i = 0; i < data.start; i++) {\n      prevTimes += `${ i } `;\n    }\n\n    if (data.start % 1 > 0) {\n      // Find the closest quarter-second to the current time, for more dynamic results\n      const dec = Math.floor((data.start % 1) * 4.0) / 4.0;\n      prevTimes += ` ${ Math.floor(data.start) + dec }`;\n    }\n\n    return prevTimes;\n  }\n\n  render() {\n    // including a lot of catchers since there always seems to be an empty block with no text and data sneaking in here\n    let data = this.props.block && this.props.block.getData() || { words: [ {} ] }\n    if (Map.isMap(data)) {\n      data = data.toJSON()\n    }\n    let wordsData = data.words || {}\n    wordsData = wordsData[0] ? wordsData[0] : {}\n\n\n    return (\n      <div\n        style={ {\n          display: 'inline-block',\n        } }\n        data-start={ wordsData.start }\n        data-end={ wordsData.end }\n        data-confidence = { this.generateConfidence(wordsData) }\n        data-prev-times = { this.generatePreviousTimes(wordsData) }\n        data-entity-key={ '' }\n        data-block-key={ this.props.block.getKey() }\n        className=\"Word\">\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nWord.propTypes = {\n  contentState: PropTypes.object,\n  //entityKey: PropTypes.string,\n  block: PropTypes.object,\n  // children: PropTypes.array\n};\n\nexport default Word;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserEdit } from '@fortawesome/free-solid-svg-icons';\n\nimport style from './WrapperBlock.module.css';\n\nclass SpeakerLabel extends PureComponent {\n  render() {\n    return (\n      <span className={ style.speaker } onClick={ this.props.handleOnClickEdit } title=\"Edit Speaker\">\n        <span className={ style.EditLabel }>\n          <FontAwesomeIcon icon={ faUserEdit } />\n        </span>\n        {this.props.name}\n      </span>\n    );\n  }\n}\n\nSpeakerLabel.propTypes = {\n  name: PropTypes.string,\n  handleOnClickEdit: PropTypes.func\n};\n\nexport default SpeakerLabel;\n","/**\n* Raised in this comment https://github.com/bbc/react-transcript-editor/pull/9\n* abstracted from https://github.com/bbc/newslabs-cdn/blob/master/js/20-bbcnpf.utils.js\n* In broadcast VIDEO, timecode is NOT hh:mm:ss:ms, it's hh:mm:ss:ff where ff is frames,\n* dependent on the framerate of the media concerned.\n* `hh:mm:ss:ff`\n*/\n\n/**\n * Helper function\n * Rounds to the 14milliseconds boundaries\n * Time in video can only \"exist in\" 14milliseconds boundaries.\n * This makes it possible for the HTML5 player to be frame accurate.\n * @param {*} seconds\n * @param {*} fps\n */\nconst normalisePlayerTime = function (seconds, fps) {\n  return Number((1.0 / fps * Math.floor(Number((fps * seconds).toPrecision(12)))).toFixed(2));\n};\n\n/*\n* @param {*} seconds\n* @param {*} fps\n*/\nconst secondsToTimecode = function (seconds, framePerSeconds) {\n  // written for PAL non-drop timecode\n  let fps = 25;\n  if (framePerSeconds !== undefined) {\n    fps = framePerSeconds;\n  }\n\n  const normalisedSeconds = normalisePlayerTime(seconds, fps);\n\n  const wholeSeconds = Math.floor(normalisedSeconds);\n  const frames = ((normalisedSeconds - wholeSeconds) * fps).toFixed(2);\n\n  // prepends zero - example pads 3 to 03\n  function _padZero(n) {\n    if (n < 10) return `0${ parseInt(n) }`;\n\n    return parseInt(n);\n  }\n\n  return `${ _padZero((wholeSeconds / 60 / 60) % 60)\n  }:${\n    _padZero((wholeSeconds / 60) % 60)\n  }:${\n    _padZero(wholeSeconds % 60)\n  }:${\n    _padZero(frames) }`;\n};\n\nexport default secondsToTimecode;\n","/**\n * Helperf unction\n * @param {*} tc\n * @param {*} fps\n */\nconst timecodeToFrames = function (tc, fps) {\n  // TODO make 29.97 fps drop-frame aware - works for 25 only.\n\n  const s = tc.split(':');\n  let frames = parseInt(s[3]);\n  frames += parseInt(s[2]) * fps;\n  frames += parseInt(s[1]) * (fps * 60);\n  frames += parseInt(s[0]) * (fps * 60 * 60);\n\n  return frames;\n};\n\n/**\n * Convert broadcast timecodes to seconds\n * @param {*} tc - `hh:mm:ss:ff`\n * @param {*} framePerSeconds - defaults to 25 if not provided\n */\nconst timecodeToSecondsHelper = function (tc, framePerSeconds) {\n  let fps = 25;\n  if (framePerSeconds !== undefined) {\n    fps = framePerSeconds;\n  }\n  const frames = timecodeToFrames(tc, fps);\n\n  return Number(Number(frames / fps).toFixed(2));\n};\n\nexport default timecodeToSecondsHelper;\n","const countColon = timecode => timecode.split(':').length;\n\nconst includesFullStop = timecode => timecode.includes('.');\n\nconst isOneDigit = str => str.length === 1;\n\nconst padTimeToTimecode = (time) => {\n  if (typeof time === 'string') {\n    switch (countColon(time)) {\n    case 4:\n      // is already in timecode format\n      // hh:mm:ss:ff\n      return time;\n    case 2:\n      // m:ss\n      if (isOneDigit(time.split(':')[0])) {\n        return `00:0${ time }:00`;\n      }\n\n      return `00:${ time }:00`;\n    case 3:\n      // hh:mm:ss\n      return `${ time }:00`;\n    default:\n      // mm.ss\n      if (includesFullStop(time)) {\n        // m.ss\n        if (isOneDigit(time.split('.')[0])) {\n          return `00:0${ time.split('.')[0] }:${ time.split('.')[1] }:00`;\n        }\n\n        return `00:${ time.replace('.', ':') }:00`;\n      }\n\n      // if just int, then it's seconds\n      // s\n      if (isOneDigit(time)) {\n        return `00:00:0${ time }:00`;\n      }\n\n      return `00:00:${ time }:00`;\n    }\n    // edge case if it's number return a number coz cannot refactor\n    // TODO: might need to refactor and move this elsewhere\n  } else {\n    return time;\n  }\n};\n\nexport default padTimeToTimecode;\n","/**\n * Wrapping around \"time stamps\" and timecode conversion modules\n * To provide more support for variety of formats.\n */\nimport secondsToTimecode from './secondsToTimecode';\nimport timecodeToSecondsHelper from './timecodeToSeconds';\nimport padTimeToTimecode from './padTimeToTimecode';\n\n/**\n * @param {*} time\n * Can take as input timecodes in the following formats\n * - hh:mm:ss:ff\n * - mm:ss\n * - m:ss\n * - ss - seconds --> if it's already in seconds then it just returns seconds\n * - hh:mm:ff\n * @todo could be refactored with some helper functions for clarity\n */\nconst timecodeToSeconds = (time) => {\n  if (typeof time === 'string') {\n    const resultPadded = padTimeToTimecode(time);\n    const resultConverted = timecodeToSecondsHelper(resultPadded);\n\n    return resultConverted;\n  }\n\n  // assuming it receive timecode as seconds as string '600'\n  return parseFloat(time);\n};\n\nconst shortTimecode = (time) => {\n  const timecode = secondsToTimecode(time);\n\n  return timecode.slice(0, -3);\n};\n\nexport { secondsToTimecode, timecodeToSeconds, shortTimecode };\n","/**\n */\n\n/**\n * @param {*} time string potentially with khmer numbers\n */\nconst numberMap = {\n  '១': 1,\n  '២': 2,\n  '៣': 3,\n  '៤': 4,\n  '៥': 5,\n  '៦': 6,\n  '៧': 7,\n  '៨': 8,\n  '៩': 9,\n  '០': 0\n}\n\n// quick and dirty solution, though probably not as fast as char codes or whatever\nconst convertToArabicNumbers = (num) => {\n  let str = num\n  if (typeof str !== 'string') {\n    str = String(str)\n  }\n  const keys = Object.keys(numberMap)\n  for (var i = 0; i < keys.length; i ++) {\n    let key = keys[i]\n    str = str.replace(new RegExp(key, \"g\"), numberMap[key])\n  }\n\n\n  return str\n};\n\nexport { convertToArabicNumbers };\n","import React from 'react';\nimport { EditorBlock, Modifier, EditorState, SelectionState } from 'draft-js';\n\nimport SpeakerLabel from './SpeakerLabel';\nimport Word from './Word';\nimport { shortTimecode, secondsToTimecode, timecodeToSeconds } from '../../Util/timecode-converter/';\nimport { convertToArabicNumbers } from '../../Util/khmer-numbers/';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarker } from '@fortawesome/free-solid-svg-icons';\n\nimport style from './WrapperBlock.module.css';\nimport { Map, List, fromJS } from 'immutable'\n\nwindow.convertToArabicNumbers = convertToArabicNumbers\nclass WrapperBlock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      speaker: '',\n      start: 0, // time in seconds from start of media\n      timecodeOffset: this.props.blockProps.timecodeOffset\n    };\n  }\n\n  componentDidMount() {\n    const { block } = this.props;\n    const speaker = block.getData().get('speaker');\n\n    const start = block.getData().get('start');\n\n    this.setState({\n      speaker: speaker,\n      start: start,\n    });\n  }\n\n  handleOnClickEdit = () => {\n    const newSpeakerName = prompt('New Speaker Name?');\n\n    if (newSpeakerName !== '' && newSpeakerName !== null) {\n      this.setState({ speaker: newSpeakerName });\n      if (this.props.blockProps.handleAnalyticsEvents !== undefined) {\n        this.props.blockProps.handleAnalyticsEvents({\n          category: 'WrapperBlock',\n          action: 'handleOnClickEdit',\n          name: 'newSpeakerName',\n          value: newSpeakerName\n        });\n      }\n\n      // From docs: https://draftjs.org/docs/api-reference-selection-state#keys-and-offsets\n      // selection points are tracked as key/offset pairs,\n      // where the key value is the key of the ContentBlock where the point is positioned\n      // and the offset value is the character offset within the block.\n\n      // Get key of the currentBlock\n      const keyForCurrentCurrentBlock = this.props.block.getKey();\n      // create empty selection for current block\n      // https://draftjs.org/docs/api-reference-selection-state#createempty\n      const currentBlockSelection = SelectionState.createEmpty(keyForCurrentCurrentBlock);\n      const editorStateWithSelectedCurrentBlock = EditorState.acceptSelection(this.props.blockProps.editorState, currentBlockSelection);\n\n      const currentBlockSelectionState = editorStateWithSelectedCurrentBlock.getSelection();\n      const newBlockDataWithSpeakerName = { speaker: newSpeakerName };\n\n      // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n      const newContentState = Modifier.mergeBlockData(\n        this.props.contentState,\n        currentBlockSelectionState,\n        newBlockDataWithSpeakerName\n      );\n\n      this.props.blockProps.setEditorNewContentState(newContentState);\n    }\n  }\n\n  getPrevStartTime = () => {\n    const keyForCurrentCurrentBlock = this.props.block.getKey();\n    const prevBlock = this.props.contentState.getBlockBefore(keyForCurrentCurrentBlock); \n    // won't be a prev block if it's the first block!\n    const prevBlockStart = prevBlock ? prevBlock.getData().get('start') : 0;\n\n    return parseFloat(prevBlockStart)\n  }\n\n  getEndTime = () => {\n    const keyForCurrentCurrentBlock = this.props.block.getKey();\n    const nextBlock = this.props.contentState.getBlockAfter(keyForCurrentCurrentBlock); \n    // won't be a next block if it's the last block, so setting really high number\n    const nextBlockStart = nextBlock ? nextBlock.getData().get('start') : 9*999*999*999;\n\n    return parseFloat(nextBlockStart)\n  }\n\n  // changes the timeblock's timing\n  handleTimecodeClick = () => {\n    let wasPlaying = this.props.blockProps.isPlaying();\n    this.props.blockProps.togglePlayMedia(false);\n\n    // does the whole thing after making sure it's really paused\n    const doIt = () => {\n      const currentBlockTime = secondsToTimecode(this.props.block.getData().get('start'));\n      // TODO not accurate; bad practice, but fastest quick fix would be to use js to just grab the element of the video player and grab the text \n      const currentVideoTime = secondsToTimecode(this.props.blockProps.currentTime);\n      let newStartTime = prompt(`Edit Time - hh:mm:ss:ff hh:mm:ss mm:ss m:ss m.ss seconds (originally at ${ currentBlockTime })`, currentVideoTime);\n\n      if (newStartTime !== '' && newStartTime !== null && parseInt(newStartTime) !== NaN) {\n        // in case of khmer numbers getting thrown in there\n        newStartTime = convertToArabicNumbers(newStartTime)\n\n        if (newStartTime.includes(':')) {\n          newStartTime = timecodeToSeconds(newStartTime)\n        }\n        newStartTime = parseFloat(newStartTime)\n\n        // make them put in new time or just cancel if start time is after end time\n        let endTime = this.getEndTime()\n        if (!isNaN(newStartTime) && !isNaN(endTime) && newStartTime >= endTime) {\n          alert(\"Start Time must be before next block's start time\")\n\n          return\n        } else if (!isNaN(newStartTime) && !isNaN(endTime) && newStartTime <= this.getPrevStartTime()) {\n          alert(\"Start Time must be after previous block's start time\")\n\n          return\n        }\n\n        this.setState({ start: newStartTime });\n\n        // Get key of the currentBlock\n        const keyForCurrentCurrentBlock = this.props.block.getKey();\n\n        // create empty selection for current block\n        // https://draftjs.org/docs/api-reference-selection-state#createempty\n        const currentBlockSelection = SelectionState.createEmpty(keyForCurrentCurrentBlock);\n        const editorStateWithSelectedCurrentBlock = EditorState.acceptSelection(this.props.blockProps.editorState, currentBlockSelection);\n\n        const currentBlockSelectionState = editorStateWithSelectedCurrentBlock.getSelection();\n\n        let wordsData = this.props.block.getData().get('words') || [ {} ]; // really should just break...being too flexible here...\n        // if (!List.isList(wordsData) || !Map.isMap(wordsData)) {\n        if (List.isList(wordsData)) {\n          console.log(\"words data was a list\");\n          wordsData = wordsData.toJSON();\n        }\n        // wordsData = wordsData.setIn([ 0, 'start' ], newStartTime)\n        console.log(\"words data\", wordsData);\n        console.log(\"block\", this.props.block);\n        wordsData[0].start = newStartTime;\n\n        const newBlockData = {\n          start: newStartTime,\n          words: wordsData,\n        };\n\n        // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n        const newContentState = Modifier.mergeBlockData(\n          this.props.contentState,\n          currentBlockSelectionState,\n          newBlockData\n        );\n\n        const newerEditorState = this.props.blockProps.setEditorNewContentState(newContentState);\n\n        //////////////////////////////////////////////////////\n        // set end time of previous block to this start time TODO (though if never use end time in app, might not be necessary\n        const previousBlock = this.props.contentState.getBlockBefore(keyForCurrentCurrentBlock);\n        // won't be a prev block if it's the first block\n        if (previousBlock) {\n          const previousBlockSelection = SelectionState.createEmpty(previousBlock.getKey());\n          const editorStateWithSelectedPrevBlock = EditorState.acceptSelection(this.props.blockProps.editorState, previousBlockSelection);\n\n          const prevBlockSelectionState = editorStateWithSelectedPrevBlock.getSelection();\n          let prevWordsData = previousBlock.getData().get('words') || [ {} ]// really should just break...being too flexible here...\n          // draft js will turn into immutable anyways, so might as well beat them to the punch\n          // if (!List.isList(prevWordsData) || !Map.isMap(prevWordsData)) {\n          if (List.isList(prevWordsData)) {\n            prevWordsData = prevWordsData.toJSON()\n          }\n          // This part might not be necessary if the previous thing works right. TODO  but better safe than sorry in the meantime, minor performance issue\n          if (Map.isMap(prevWordsData[0])) {\n            prevWordsData[0] = prevWordsData[0].toJSON()\n          }\n          // prevWordsData = prevWordsData.setIn([ 0, 'end' ], newStartTime)\n          prevWordsData[0].end = newStartTime\n\n          const newPrevBlockData = {\n            words: prevWordsData,\n          };\n\n          // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n          const newPrevBlockContentState = Modifier.mergeBlockData(\n            newerEditorState.getCurrentContent(),\n            prevBlockSelectionState,\n            newPrevBlockData\n          );\n\n          this.props.blockProps.setEditorNewContentState(newPrevBlockContentState);\n        }\n      } else {\n        console.error(\"What went wrong setting timeblock time?\", newStartTime)\n      }\n      if (wasPlaying) {\n        this.props.blockProps.togglePlayMedia(true)\n      }\n    }\n\n    // this is so bad...but so is using prompt ha\n    // makes sure that the video stops, because if prompt opens before it stops, it keeps playign\n    const interval = setInterval(() => {\n      if (!this.props.blockProps.isPlaying()) {\n        clearInterval(interval)\n        doIt();\n      }\n    }, 20)\n\n  }\n\n  handleJumpToHereClick = (e) => {\n    // https://github.com/facebook/draft-js/issues/696#issuecomment-302903086\n    e.preventDefault() // prevents cursor from moving away\n    this.props.blockProps.onJumpToHereClick(this.state.start);\n  }\n\n  render() {\n    let startTimecode = this.state.start;\n    const { blockProps } = this.props\n    if (blockProps.timecodeOffset) {\n      startTimecode += this.props.blockProps.timecodeOffset;\n    }\n\n    const speakerElement = <SpeakerLabel\n      name={ this.state.speaker }\n      handleOnClickEdit={ this.handleOnClickEdit }\n    />;\n\n    const timecodeElement = <span className={ style.time } onClick={ this.handleTimecodeClick } title=\"Edit Timecode for this block of speech\">{shortTimecode(startTimecode)}</span>;\n\n    return (\n      <div className={ style.WrapperBlock }>\n        <div className={ style.markers } contentEditable={ false }>\n          {blockProps.showSpeakers ? speakerElement : ''}\n          <FontAwesomeIcon icon={ faMapMarker } onMouseDown={ this.handleJumpToHereClick } className= { style.jumpToHere } title=\"Jump to this time\" />\n          {blockProps.showTimecodes ? timecodeElement : ''}\n        </div>\n        <div className={ style.text }>\n          <Word block={ this.props.block }>\n            <EditorBlock { ...this.props } />\n          </Word>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WrapperBlock;\n","/**\n * Convert BBC Kaldi json\n ```\n {\n    \"action\": \"audio-transcribe\",\n    \"retval\": {\n      \"status\": true,\n      \"wonid\": \"octo:2692ea33-d595-41d8-bfd5-aa7f2d2f89ee\",\n      \"punct\": \"There is a day. About ten years ago when  ...\",\n      \"words\": [\n        {\n          \"start\": 13.02,\n          \"confidence\": 0.68,\n          \"end\": 13.17,\n          \"word\": \"there\",\n          \"punct\": \"There\",\n          \"index\": 0\n        },\n        {\n          \"start\": 13.17,\n          \"confidence\": 0.61,\n          \"end\": 13.38,\n          \"word\": \"is\",\n          \"punct\": \"is\",\n          \"index\": 1\n        },\n        ...\n```\n *\n * into\n *\n ```\n const blocks = [\n  {\n    \"text\": \"There is a day.\",\n    \"type\": \"paragraph\",\n    \"data\": {\n      \"speaker\": \"TBC 0\",\n      \"words\": [\n        {\n          \"start\": 13.02,\n          \"confidence\": 0.68,\n          \"end\": 13.17,\n          \"word\": \"there\",\n          \"punct\": \"There\",\n          \"index\": 0\n        },\n        {\n          \"start\": 13.17,\n          \"confidence\": 0.61,\n          \"end\": 13.38,\n          \"word\": \"is\",\n          \"punct\": \"is\",\n          \"index\": 1\n        },\n        {\n          \"start\": 13.38,\n          \"confidence\": 0.99,\n          \"end\": 13.44,\n          \"word\": \"a\",\n          \"punct\": \"a\",\n          \"index\": 2\n        },\n        {\n          \"start\": 13.44,\n          \"confidence\": 1,\n          \"end\": 13.86,\n          \"word\": \"day\",\n          \"punct\": \"day.\",\n          \"index\": 3\n        }\n      ],\n      \"start\": 13.02\n    },\n    \"entityRanges\": [\n      {\n        \"start\": 13.02,\n        \"end\": 13.17,\n        \"confidence\": 0.68,\n        \"text\": \"There\",\n        \"offset\": 0,\n        \"length\": 5,\n        \"key\": \"li6c6ld\"\n      },\n      {\n        \"start\": 13.17,\n        \"end\": 13.38,\n        \"confidence\": 0.61,\n        \"text\": \"is\",\n        \"offset\": 6,\n        \"length\": 2,\n        \"key\": \"pcgzkp6\"\n      },\n      {\n        \"start\": 13.38,\n        \"end\": 13.44,\n        \"confidence\": 0.99,\n        \"text\": \"a\",\n        \"offset\": 9,\n        \"length\": 1,\n        \"key\": \"ngomd9\"\n      },\n      {\n        \"start\": 13.44,\n        \"end\": 13.86,\n        \"confidence\": 1,\n        \"text\": \"day.\",\n        \"offset\": 11,\n        \"length\": 4,\n        \"key\": \"sgmfl4f\"\n      }\n    ]\n  },\n  ...\n```\n *\n */\n\n// import generateEntitiesRanges from '../generate-entities-ranges/index.js';\n\n/**\n * groups words list from kaldi transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words opbjects from kaldi transcript\n */\n\nconst groupWordsInParagraphs = (words) => {\n  const results = [];\n  let paragraph = { words: [], text: [] };\n\n  // for us, until can figure out a way to go from speech recognition to punctuation, so can divide up speech blocks, with Khmer just want to make each word a paragraph, since that's kind of what ends up happening.\n  words.forEach((word) => {\n    // if word contains punctuation TODO add Khmer punctuation. Right now, will always return false\n    if (true || /[.?!\\s]/.test(word.punct)) {\n      paragraph.words.push(word);\n      paragraph.text.push(word.punct);\n      results.push(paragraph);\n      // reset paragraph\n      paragraph = { words: [], text: [] };\n    } else {\n\n      paragraph.words.push(word);\n      paragraph.text.push(word.punct);\n    }\n  });\n  // RQ added. If we don't add this though, I think it ends up skipping the last paragraph...or for Khmer, maybe the whole transcript!\n  results.push(paragraph);\n\n  return results;\n};\n\nconst bbcKaldiToDraft = (bbcKaldiJson) => {\n  const results = [];\n  let tmpWords;\n\n  // BBC Octo Labs API Response wraps Kaldi response around retval,\n  // while kaldi contains word attribute at root\n  if (bbcKaldiJson.retval !== undefined) {\n    tmpWords = bbcKaldiJson.retval.words;\n  } else {\n    tmpWords = bbcKaldiJson.words;\n  }\n\n  const wordsByParagraphs = groupWordsInParagraphs(tmpWords);\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    if (!paragraph.words.length) {\n      return\n    }\n\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: `TBC ${ i }`,\n        words: paragraph.words,\n        start: paragraph.words[0].start\n      },\n    };\n    // console.log(JSON.stringify(draftJsContentBlockParagraph,null,2))\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  return results;\n};\n\nexport default bbcKaldiToDraft;\n","/**\n * Helper function to generate draft.js entities,\n * see unit test for example data structure\n * it adds offset and length to recognise word in draftjs\n */\n\n/**\n*  @param {json} words  - List of words\n*  @param {string} wordAttributeName - eg 'punct' or 'text' or etc.\n* attribute for the word object containing the text. eg word ={ punct:'helo', ... }\n*  or eg word ={ text:'helo', ... }\n*/\nconst generateEntitiesRanges = (words, wordAttributeName) => {\n  let position = 0;\n\n  return words.map((word) => {\n    const result = {\n      start: word.start,\n      end: word.end,\n      confidence: word.confidence,\n      text: word[wordAttributeName],\n      offset: position,\n      length: word[wordAttributeName].length,\n      key: Math.random()\n        .toString(36)\n        .substring(6),\n    };\n    // increase position counter - to determine word offset in paragraph\n    position = position + word[wordAttributeName].length + 1;\n\n    return result;\n  });\n};\n\nexport default generateEntitiesRanges;\n","/**\n * Convert autoEdit2 Json\n *\n * into\n *\n ```\n const blocks = [\n        {\n            text: 'Hello',\n            type: 'paragraph',\n            data: {\n            speaker: 'Foo',\n            },\n            entityRanges: [],\n        },\n        {\n            text: 'World',\n            type: 'paragraph',\n            data: {\n            speaker: 'Bar',\n            },\n            entityRanges: [],\n        },\n        ];\n```\n *\n * See samples folder and test file\n * for reference data structures\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index';\n\n/**\n * groups words list from autoEdit transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words objects from autoEdit transcript\n */\n\nconst groupWordsInParagraphs = (autoEditText) => {\n  const results = [];\n  let paragraph = { words: [], text: [] };\n\n  autoEditText.forEach((autoEditparagraph) => {\n    autoEditparagraph.paragraph.forEach((autoEditLine) => {\n      autoEditLine.line.forEach((word) => {\n        // adjusting time reference attributes from\n        // `startTime` `endTime` to `start` `end`\n        // for word object\n        const tmpWord = {\n          text: word.text,\n          start: word.startTime,\n          end: word.endTime,\n        };\n        //  if word contains punctuation\n        if (/[.?!]/.test(word.text)) {\n          paragraph.words.push(tmpWord);\n          paragraph.text.push(word.text);\n          results.push(paragraph);\n          // reset paragraph\n          paragraph = { words: [], text: [] };\n        } else {\n          paragraph.words.push(tmpWord);\n          paragraph.text.push(word.text);\n        }\n      });\n    });\n  });\n\n  return results;\n};\n\nconst autoEdit2ToDraft = (autoEdit2Json) => {\n  const results = [];\n  const tmpWords = autoEdit2Json.text;\n  const wordsByParagraphs = groupWordsInParagraphs(tmpWords);\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: `TBC ${ i }`,\n        words: paragraph.words,\n        start: paragraph.words[0].start\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'text'),\n    };\n    // console.log(JSON.stringify(draftJsContentBlockParagraph,null,2))\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  // console.log(JSON.stringify(results,null,2))\n  return results;\n};\n\nexport default autoEdit2ToDraft;\n","/**\n *  Convert Speechmatics\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\n\n/**\n * groups words list from speechmatics based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @todo As this function is also used in the bbc-kaldi adapter, should it be refactored into its own file?\n * @param {array} words - array of words objects from speechmatics transcript\n */\n\nconst groupWordsInParagraphs = (words) => {\n  const results = [];\n  let paragraph = { words: [], text: [] };\n\n  words.forEach((word) => {\n    // if word contains punctuation\n    if (/[.?!]/.test(word.punct)) {\n      paragraph.words.push(word);\n      paragraph.text.push(word.punct);\n      results.push(paragraph);\n      // reset paragraph\n      paragraph = { words: [], text: [] };\n    } else {\n      paragraph.words.push(word);\n      paragraph.text.push(word.punct);\n    }\n  });\n\n  return results;\n};\n\n/**\n * Determines the speaker of a paragraph by comparing the start time of the paragraph with\n * the speaker times.\n * @param {float} start - Starting point of paragraph\n * @param {array} speakers - list of all speakers with start and end time\n */\nconst getSpeaker = (start, speakers) => {\n  for (var speakerIdx in speakers) {\n    const speaker = speakers[speakerIdx];\n    if (start >= speaker.start & start < speaker.end) {\n      return speaker.name;\n    }\n  }\n\n  return 'UNK';\n};\n\n/**\n * Speechmatics treats punctuation as own words. This function merges punctuations with\n * the pevious word and adjusts the total duration of the word.\n * @param {array} words - array of words objects from speechmatics transcript\n */\nconst curatePunctuation = (words) => {\n  const curatedWords = [];\n  words.forEach((word) => {\n    if (/[.?!]/.test(word.name)) {\n      curatedWords[curatedWords.length-1].name = curatedWords[curatedWords.length-1].name + word.name;\n      curatedWords[curatedWords.length-1].duration = (parseFloat(curatedWords[curatedWords.length-1].duration) + parseFloat(word.duration)).toString();\n    } else {\n      curatedWords.push(word);\n    }\n  }\n  );\n\n  return curatedWords;\n};\n\nconst speechmaticsToDraft = (speechmaticsJson) => {\n  const results = [];\n\n  let tmpWords;\n  tmpWords = curatePunctuation(speechmaticsJson.words);\n  tmpWords = tmpWords.map((element, index) => {\n    return ({\n      start: element.time,\n      end: (parseFloat(element.time) + parseFloat(element.duration)).toString(),\n      confidence: element.confidence,\n      word: element.name.toLowerCase().replace(/[.?!]/g, ''),\n      punct: element.name,\n      index: index,\n    });\n  });\n\n  let tmpSpeakers;\n  tmpSpeakers = speechmaticsJson.speakers;\n  tmpSpeakers = tmpSpeakers.map((element) => {\n    return ({\n      start: element.time,\n      end: (parseFloat(element.time) + parseFloat(element.duration)).toString(),\n      name: element.name,\n    });\n  });\n\n  const wordsByParagraphs = groupWordsInParagraphs(tmpWords);\n\n  wordsByParagraphs.forEach((paragraph) => {\n    const paragraphStart = paragraph.words[0].start;\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: getSpeaker(paragraphStart, tmpSpeakers),\n        words: paragraph.words,\n        start: paragraphStart\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'punct'), // wordAttributeName\n    };\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  return results;\n};\n\nexport default speechmaticsToDraft;\n","import bbcKaldiToDraft from './bbc-kaldi/index';\nimport autoEdit2ToDraft from './autoEdit2/index';\nimport speechmaticsToDraft from './speechmatics/index';\n/**\n * Adapters for STT conversion\n * @param {json} transcriptData - A json transcript with some word accurate timecode\n * @param {string} sttJsonType - the type of transcript supported by the available adapters\n */\n\n// converts nested arrays into one dimensional array\nconst flatten = list => list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n\n/*\nconst createEntityMap = (blocks) => {\n  const entityRanges = blocks.map(block => block.entityRanges);\n  // eslint-disable-next-line no-use-before-define\n  const flatEntityRanges = flatten(entityRanges);\n\n  const entityMap = {};\n\n  flatEntityRanges.forEach((data) => {\n    entityMap[data.key] = {\n      type: 'WORD',\n      mutability: 'MUTABLE',\n      data,\n    };\n  });\n\n  return entityMap;\n};\n*/\n\nconst sttJsonAdapter = (transcriptData, sttJsonType) => {\n  let blocks;\n  switch (sttJsonType) {\n  case 'bbckaldi':\n    blocks = bbcKaldiToDraft(transcriptData);\n\n    return { blocks, entityMap: {} }; //createEntityMap(blocks) };\n  case 'autoedit2':\n    blocks = autoEdit2ToDraft(transcriptData);\n\n    return { blocks, entityMap: {} }; // createEntityMap(blocks) };\n  case 'speechmatics':\n    blocks = speechmaticsToDraft(transcriptData);\n\n    return { blocks, entityMap: {} }; //  createEntityMap(blocks) };\n  case 'draftjs':\n    return transcriptData; // (typeof transcriptData === 'string')? JSON.parse(transcriptData): transcriptData;\n  default:\n    // code block\n    console.error('not recognised the stt enginge');\n  }\n};\n\nexport default sttJsonAdapter;\n","export default (blockData) => {\n  const lines = blockData.blocks.map(x => x.text);\n\n  return lines.join('\\n\\n');\n};\n","import draftToTxt from './txt/index';\n/**\n * Adapters for Draft.js conversion\n * @param {json} blockData - Draft.js blocks\n * @param {string} exportFormat - the type of file supported by the available adapters\n */\n\nconst exportAdapter = (blockData, exportFormat) => {\n  switch (exportFormat) {\n  case 'draftjs':\n    return { data: JSON.stringify(blockData, null, 2), ext: 'json' };\n  case 'txt':\n    return { data: draftToTxt(blockData), ext: 'txt' };\n  default:\n    // code block\n    console.error('Did not recognise the export format');\n  }\n};\n\nexport default exportAdapter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from 'react-simple-tooltip';\nimport { Map, List, fromJS } from 'immutable'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle, faMousePointer, faICursor, faUserEdit, faKeyboard, faSave, faShareSquare } from '@fortawesome/free-solid-svg-icons';\n\nimport {\n  Editor,\n  EditorState,\n  CompositeDecorator,\n  convertFromRaw,\n  convertToRaw,\n  getDefaultKeyBinding,\n  Modifier,\n  KeyBindingUtil,\n  SelectionState,\n} from 'draft-js';\n\nimport Word from './Word';\nimport WrapperBlock from './WrapperBlock';\n\nimport sttJsonAdapter from '../../Util/adapters/index.js';\nimport exportAdapter from '../../Util/export-adapters/index.js';\nimport style from './index.module.css';\n\nconst { hasCommandModifier } = KeyBindingUtil;\n\nclass TimedTextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      transcriptData: this.props.transcriptData,\n      isEditable: this.props.isEditable,\n      sttJsonType: this.props.sttJsonType,\n      timecodeOffset: this.props.timecodeOffset,\n      showSpeakers: this.props.showSpeakers,\n      showTimecodes: this.props.showTimecodes,\n      // inputCount: 0,\n      currentWord: {},\n      settingTimecodeFor: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.transcriptData !== null) {\n\n      return {\n        transcriptData: nextProps.transcriptData,\n        isEditable: nextProps.isEditable,\n        timecodeOffset: nextProps.timecodeOffset,\n        showSpeakers: nextProps.showSpeakers,\n        showTimecodes: nextProps.showTimecodes\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      (prevState.transcriptData !== this.state.transcriptData)\n      && ( this.props.mediaUrl!== null && !this.isPresentInLocalStorage(this.props.mediaUrl) )\n    ) {\n      this.loadData();\n    }\n    if (prevState.timecodeOffset !== this.state.timecodeOffset\n      || prevState.showSpeakers !== this.state.showSpeakers\n      || prevState.showTimecodes !== this.state.showTimecodes) {\n      // forcing a re-render is an expensive operation and\n      // there might be a way of optimising this at a later refactor (?)\n      // the issue is that WrapperBlock is not update on TimedTextEditor\n      // state change otherwise.\n      // for now compromising on this, as setting timecode offset, and\n      // display preferences for speakers and timecodes are not expected to\n      // be very frequent operations but rather one time setup in most cases.\n      this.forceRenderDecorator();\n    }\n  }\n\n  onChange = (editorState) => {\n    // https://draftjs.org/docs/api-reference-editor-state#lastchangetype\n    // https://draftjs.org/docs/api-reference-editor-change-type\n    // doing editorStateChangeType === 'insert-characters'  is triggered even\n    // outside of draftJS eg when clicking play button so using this instead\n    // see issue https://github.com/facebook/draft-js/issues/1060\n    if (this.state.editorState.getCurrentContent() !== editorState.getCurrentContent()) {\n      if (this.props.isPauseWhileTypingOn) {\n        if (this.props.isPlaying()) {\n          this.props.playMedia(false);\n          // Pause video for X seconds\n          /*  NOTE trying it without auto-resume, for better control and maybe less clunky UI\n          const pauseWhileTypingIntervalInMilliseconds = 4*1000;\n          // resets timeout\n          clearTimeout(this.pauseWhileTypingTimeOut);\n          this.pauseWhileTypingTimeOut = setTimeout(function() {\n            // after timeout starts playing again\n            this.props.playMedia(true);\n          }.bind(this), pauseWhileTypingIntervalInMilliseconds);\n          */ \n        }\n      }\n\n      /*\n      // trying to keep length to whole block, including latest additions\n      const contentState = editorState.getCurrentContent();\n      const blockKey = contentState.getSelectionAfter().getStartKey() // TODO maybe should be getSelectionAfter\n      const currentBlock = contentState.getBlockForKey(blockKey)\n      const entityKey = this.findEntityKeyForBlock(currentBlock)\n      contentState.mergeEntityData(entityKey, {\n        offset: 0,\n        length: currentBlock.getText().length\n      })\n      */\n    }\n\n    if (this.state.isEditable) {\n      this.setState(() => ({\n        editorState\n      }), () => {\n        // saving when user has stopped typing for more then five seconds\n        if (this.saveTimer!== undefined) {\n          clearTimeout(this.saveTimer);\n        }\n        this.saveTimer = setTimeout(() => {\n          this.localSave(this.props.mediaUrl);\n        }, 1000);\n      });\n    }\n\n  }\n\n  // helper for getting the entity for the block\n  // apparently there's no better way.. https://github.com/facebook/draft-js/issues/1681\n  /*\n  findEntityKeyForBlock = (block) => {\n    let entity\n    for (var i = 0; i < block.getText().length; i++) {\n      entity = block.getEntityAt(i)\n      if (entity) {\n        break\n      }\n    }\n  \n    return entity\n  } */\n\n  loadData() {\n    if (this.props.transcriptData !== null) {\n      const blocks = sttJsonAdapter(this.props.transcriptData, this.props.sttJsonType);\n      if (blocks.blocks.length === 0) {\n        console.error(\"No Blocks returned!\")\n        alert(\"No Blocks returned!\")\n\n        // TODO this still breaks but allows user to continue doing some stuff at least...\n        // probably want better error handling\n        return \n      }\n      this.setEditorContentState(blocks);\n    }\n  }\n\n  getEditorContent(exportFormat) {\n    const format = exportFormat || 'draftjs';\n\n    return exportAdapter(convertToRaw(this.state.editorState.getCurrentContent()), format);\n  }\n\n  // click on words - for navigation\n  // eslint-disable-next-line class-methods-use-this\n  handleDoubleClick = (event) => {\n    // nativeEvent --> React giving you the DOM event\n    let element = event.nativeEvent.target;\n    // find the parent in Word that contains span with time-code start attribute\n    while (!element.hasAttribute('data-start') && element.parentElement) {\n      element = element.parentElement;\n    }\n\n    if (element.hasAttribute('data-start')) {\n      const t = parseFloat(element.getAttribute('data-start'));\n      this.props.onWordClick(t);\n    }\n  }\n\n  localSave = () => {\n    console.log('localSave');\n    clearTimeout(this.saveTimer);\n    let mediaUrlName = this.props.mediaUrl;\n    // if using local media instead of using random blob name\n    // that makes it impossible to retrieve from on page refresh\n    // use file name\n    if (this.props.mediaUrl.includes('blob')) {\n      mediaUrlName = this.props.fileName;\n    }\n\n    const data = convertToRaw(this.state.editorState.getCurrentContent());\n    localStorage.setItem(`draftJs-${ mediaUrlName }`, JSON.stringify(data));\n    const newLastLocalSavedDate = new Date().toString();\n    localStorage.setItem(`timestamp-${ mediaUrlName }`, newLastLocalSavedDate);\n\n    // return newLastLocalSavedDate;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isPresentInLocalStorage(mediaUrl) {\n    if (mediaUrl !== null) {\n      let mediaUrlName = mediaUrl;\n\n      if (mediaUrl.includes('blob')) {\n        mediaUrlName = this.props.fileName;\n      }\n\n      const data = localStorage.getItem(`draftJs-${ mediaUrlName }`);\n      if (data !== null) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  }\n\n  loadLocalSavedData(mediaUrl) {\n    let mediaUrlName = mediaUrl;\n    if (mediaUrl.includes('blob')) {\n      mediaUrlName = this.props.fileName;\n    }\n    const data = JSON.parse(localStorage.getItem(`draftJs-${ mediaUrlName }`));\n    if (data !== null) {\n      const lastLocalSavedDate = localStorage.getItem(`timestamp-${ mediaUrlName }`);\n      this.setEditorContentState(data);\n\n      return lastLocalSavedDate;\n    }\n\n    return '';\n  }\n\n  // originally from\n  // https://github.com/draft-js-plugins/draft-js-plugins/blob/master/draft-js-counter-plugin/src/WordCounter/index.js#L12\n  getWordCount = (editorState) => {\n    const plainText = editorState.getCurrentContent().getPlainText('');\n    const regex = /(?:\\r\\n|\\r|\\n)/g; // new line, carriage return, line feed\n    const cleanString = plainText.replace(regex, ' ').trim(); // replace above characters w/ space\n    const wordArray = cleanString.match(/\\S+/g); // matches words according to whitespace\n\n    return wordArray ? wordArray.length : 0;\n  }\n\n  /**\n  * @param {object} data.entityMap - draftJs entity maps - used by convertFromRaw\n  * @param {object} data.blocks - draftJs blocks - used by convertFromRaw\n  * set DraftJS Editor content state from blocks\n  * contains blocks and entityMap\n  */\n  setEditorContentState = (data) => {\n    if (!data || !data.blocks.length) {\n      console.error(\"No data given!\")\n    }\n    const contentState = convertFromRaw(data);\n    // eslint-disable-next-line no-use-before-define\n    const editorState = EditorState.createWithContent(contentState); // , decorator);\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TimedTextEditor',\n        action: 'setEditorContentState',\n        name: 'getWordCount',\n        value: this.getWordCount(editorState)\n      });\n    }\n\n    this.setState({ editorState });\n  }\n\n  // Helper function to re-render this component\n  // used to re-render WrapperBlock on timecode offset change\n  // or when show / hide preferences for speaker labels and timecodes change\n  // RQ: trying without decorator for speed \n  forceRenderDecorator = () => {\n    // const { editorState, updateEditorState } = this.props;\n    const contentState = this.state.editorState.getCurrentContent();\n    // const decorator = this.state.editorState.getDecorator();\n\n    const newState = EditorState.createWithContent(\n      contentState,\n      // decorator\n    );\n\n    // this.setEditorNewContentState(newState);\n    const newEditorState = EditorState.push(newState, contentState);\n    this.setState({ editorState: newEditorState });\n  }\n\n  /**\n  * Update Editor content state\n  */\n  setEditorNewContentState = (newContentState) => {\n    const newEditorState = EditorState.push(this.state.editorState, newContentState);\n    this.setState({ editorState: newEditorState });\n\n    return newEditorState\n  }\n\n  /**\n   * Listen for draftJs custom key bindings\n   */\n  customKeyBindingFn = (e) => {\n    const enterKey = 13;\n    const spaceKey =32;\n    const kKey = 75;\n    const lKey = 76;\n    const jKey = 74;\n    const equalKey = 187;//used for +\n    const minusKey = 189; // -\n    const rKey = 82;\n    const tKey = 84;\n\n    if (e.keyCode === enterKey ) {\n      return 'split-paragraph';\n    }\n    // TODO add in the hotkeys I have\n    // if alt key is pressed in combination with these other keys\n    if (e.altKey && ((e.keyCode === spaceKey)\n    || (e.keyCode === spaceKey)\n    || (e.keyCode === kKey)\n    || (e.keyCode === lKey)\n    || (e.keyCode === jKey)\n    || (e.keyCode === equalKey)\n    || (e.keyCode === minusKey)\n    || (e.keyCode === rKey)\n    || (e.keyCode === tKey))\n    ) {\n      e.preventDefault();\n\n      return 'keyboard-shortcuts';\n    }\n\n    return getDefaultKeyBinding(e);\n  }\n\n  /**\n   * Handle draftJs custom key commands\n   */\n  handleKeyCommand = (command) => {\n    if (command === 'split-paragraph') {\n      this.splitParagraph();\n    }\n\n    if (command === 'keyboard-shortcuts') {\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  /**\n   * Helper function to handle splitting paragraphs with return key\n   * on enter key, perform split paragraph at selection point.\n   * Add timecode of next word after split to paragraph\n   * as well as speaker name to new paragraph\n   */\n  splitParagraph = () => {\n    // https://github.com/facebook/draft-js/issues/723#issuecomment-367918580\n    // https://draftjs.org/docs/api-reference-selection-state#start-end-vs-anchor-focus\n    const currentSelection = this.state.editorState.getSelection();\n    // only perform if selection is not selecting a range of words\n    // in that case, we'd expect delete + enter to achieve same result.\n    if (currentSelection.isCollapsed()) {\n      if (this.props.isPauseWhileTypingOn) {\n        if (this.props.isPlaying()) {\n          this.props.playMedia(false);\n        }\n      }\n      const currentContent = this.state.editorState.getCurrentContent();\n      // https://draftjs.org/docs/api-reference-modifier#splitblock\n      const newContentState = Modifier.splitBlock(currentContent, currentSelection);\n      // https://draftjs.org/docs/api-reference-editor-state#push\n      // splitState is new editor state after the push\n      const splitState = EditorState.push(this.state.editorState, newContentState, 'split-block');\n      const targetSelection = splitState.getSelection();\n\n      const originalBlock = currentContent.blockMap.get(newContentState.selectionBefore.getStartKey());\n      const originalBlockData = originalBlock.getData();\n      const blockSpeaker = originalBlockData.get('speaker');\n      const blockStartTime = originalBlockData.get('start');\n      const currentWord = this.getCurrentWord(false)\n      const originalIsCurrent = currentWord.start == blockStartTime\n\n      const wordStartTime = blockStartTime;\n\n      // split paragraph\n      // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n\n      // adding words data too\n      // starts with same worddata, and then replace the 'word' and 'punct' keys\n      let wordsDataForNew = originalBlockData.get('words') || [ {} ];\n      // TODO make everything just normal JS, not immutable. Unless decide to move everything to imutable\n      if (!Map.isMap(wordsDataForNew)) {\n        wordsDataForNew = fromJS(wordsDataForNew);\n      }\n      const newBlock = newContentState.getBlockAfter(originalBlock.getKey());\n      // TODO make everything just normal JS, not immutable. Unless decide to move everything to imutable\n\n      // TODO make an option later. But for now, default is if splitting a block that is currently playing in the audio, make the new start time the current media time\n      const newStartTime = originalIsCurrent ? this.props.currentTime : wordStartTime;\n\n      // make word and punct just the new words and punct\n      wordsDataForNew = wordsDataForNew\n        .setIn([ 0, 'word' ], newBlock.getText())\n        .setIn([ 0, 'punct' ], newBlock.getText())\n        .setIn([ 0, 'start' ], newStartTime);\n\n      let wordsDataForOld = originalBlockData.get('words') || [ {} ];\n      // if (!List.isList(wordsDataForOld) || !Map.isMap(wordsDataForOld)) {\n      // TODO make everything just normal JS, not immutable. Unless decide to move everything to imutable\n      if (!Map.isMap(wordsDataForOld)) {\n        wordsDataForOld = fromJS(wordsDataForOld);\n      }\n      const wordsLeft = originalBlock.getText().slice(0, - (newBlock.getText().length));\n      wordsDataForOld = wordsDataForOld.setIn([ 0, 'word' ], wordsLeft)\n        .setIn([ 0, 'end' ], newStartTime)\n        .setIn([ 0, 'punct' ], wordsLeft);\n\n      // add the new block (the third arg) into draft js\n      const afterMergeContentState = Modifier.mergeBlockData(\n        splitState.getCurrentContent(),\n        targetSelection,\n        {\n          'start': newStartTime,\n          'speaker': blockSpeaker,\n          'words': wordsDataForNew,\n        }\n      );\n      const newestEditorState = this.setEditorNewContentState(afterMergeContentState);\n\n      // update old transcript word and punct\n\n      const afterMergeContentState2 = Modifier.mergeBlockData(\n        newestEditorState.getCurrentContent(),\n        SelectionState.createEmpty(originalBlock.getKey()),\n        {\n          'words': wordsDataForOld,\n        }\n      );\n      this.setEditorNewContentState(afterMergeContentState2);\n\n\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  /**\n   * Helper function for splitParagraph\n   * to find the closest entity (word) to a selection point\n   * that does not fall on an entity to begin with\n   * Looks before if it's last char in a paragraph block.\n   * After for everything else.\n   */\n    /*\n  findClosestEntityKeyToSelectionPoint = (currentSelection, originalBlock) => {\n    // set defaults\n    let entityKey = null;\n    let isEndOfParagraph = false;\n\n    // selection offset from beginning of the paragraph block\n    const startSelectionOffsetKey = currentSelection.getStartOffset();\n    // length of the plain text for the ContentBlock\n    const lengthPlainTextForTheBlock = originalBlock.getLength();\n    // number of char from selection point to end of paragraph\n    const remainingCharNumber = lengthPlainTextForTheBlock - startSelectionOffsetKey;\n    // if it's the last char in the paragraph - get previous entity\n    if (remainingCharNumber === 0 ) {\n      isEndOfParagraph = true;\n      for (let j = lengthPlainTextForTheBlock; j >0 ; j--) {\n        entityKey = originalBlock.getEntityAt(j);\n        if (entityKey!== null) {\n          // if it finds it then return\n          return { entityKey, isEndOfParagraph };\n        }\n      }\n    }\n    // if it's first char or another within the block - get next entity\n    else {\n      console.log('Main part of paragraph');\n      let initialSelectionOffset = currentSelection.getStartOffset();\n      for (let i = 0; i < remainingCharNumber ; i++) {\n        initialSelectionOffset +=i;\n        entityKey = originalBlock.getEntityAt(initialSelectionOffset);\n        // if it finds it then return\n        if (entityKey !== null) {\n          return { entityKey, isEndOfParagraph };\n        }\n      }\n    }\n\n    // cover edge cases where it doesn't find it\n    return { entityKey, isEndOfParagraph };\n  }*/\n\n  updateTimecode = (data) => {\n    console.log(\"updating with data\", data)\n  }\n\n  renderBlockWithTimecodes = () => {\n    return {\n      component: WrapperBlock,\n      editable: true,\n      props: {\n        showSpeakers: this.state.showSpeakers,\n        showTimecodes: this.state.showTimecodes,\n        timecodeOffset: this.state.timecodeOffset,\n        editorState: this.state.editorState,\n        setEditorNewContentState: this.setEditorNewContentState,\n        onJumpToHereClick: this.props.onJumpToHereClick,\n        onWordClick: this.props.onWordClick,\n        handleAnalyticsEvents: this.props.handleAnalyticsEvents,\n        settingTimecodeFor: this.state.settingTimecodeFor,\n        updateTimecode: this.updateTimecode,\n        togglePlayMedia: this.props.playMedia,\n        isPlaying: this.props.isPlaying,\n        currentTime: this.props.currentTime,\n      }\n    };\n  }\n\n  copyCurrentTimeToClipboard = () => {\n    const text = `https://ryanquey.github.io/khmer-react-transcript-editor?startTime=${ this.props.currentTime }`\n    navigator.clipboard.writeText(text).then(function() {\n      console.log('Async: Copying to clipboard was successful!');\n    }, function(err) {\n      console.error('Async: Could not copy text: ', err);\n    });\n  }\n\n  // TODO just do 2 js calls, one to scroll, the other to get current word. Much neater\n  getCurrentWord = (checkToScroll = true) => {\n    const currentWord = {\n      start: 'NA',\n      end: 'NA'\n    };\n\n    const nextWord = {\n      start: 'NA',\n      end: 'NA'\n    };\n\n    let blockMap\n    if (this.state.transcriptData) {\n      const contentState = this.state.editorState.getCurrentContent();\n      // TODO: using convertToRaw here might be slowing down performance(?)\n      const contentStateConvertEdToRaw = convertToRaw(contentState);\n      blockMap = contentStateConvertEdToRaw.blocks;\n\n      // TODO since ran so many times, consider slightly faster loop (reg for loop?)\n      for (var i = 0; i < blockMap.length; i++) {\n        const block = blockMap[i] || {};\n        let word = ((block.data || {}).words || [])\n        \n        // TODO happens if we split a paragraph...need a better more consistent system for this...\n        if (List.isList(word)) {\n          word = word.toJSON()[0] || {};\n        } else {\n          word = word[0] || {}\n        }\n        if (word.end === undefined || word.end === undefined) {\n          console.log(\"this word is broken...\", word, block)\n        }\n\n        if (word.start <= this.props.currentTime && word.end >= this.props.currentTime) {\n          currentWord.start = word.start;\n          currentWord.end = word.end;\n\n          const nextBlock = blockMap[i + 2] || blockMap[i + 1]\n          const next = nextBlock && ((nextBlock.data || {}).words || [])[0] || {};\n          if (next) {\n            // won't be a next for last word in transcript\n            nextWord.start = next.start;\n            nextWord.end = next.end;\n          }\n          break\n        }\n\n      }\n    }\n\n    if (checkToScroll && currentWord.start !== 'NA' && this.props.isPlaying()) {\n      if (this.props.isScrollIntoViewOn) {\n        const thisWordElement = document.querySelector(`.Word[data-start=\"${ currentWord.start }\"]`);\n        const nextWordElement = document.querySelector(`.Word[data-start=\"${ nextWord.start }\"]`);\n        // there should always be currentWordElement, but just in case...\n        thisWordElement && thisWordElement.scrollIntoView({ block: 'nearest', inline: 'center' });\n        nextWordElement && nextWordElement.scrollIntoView({ block: 'nearest', inline: 'center' });\n      }\n    }\n    if (this.state.transcriptData && currentWord.start === \"NA\") {\n      // there's a bug in the code!\n      // console.log(\"What is going wrong with the blocks?\", blockMap, \"currentWord\", currentWord);\n      // console.log(\"for the time:\", this.props.currentTime);\n    }\n\n    return currentWord;\n  }\n\n  render() {\n    const helpMessage = <div className={ style.helpMessage }>\n      <span><FontAwesomeIcon className={ style.icon } icon={ faMousePointer } />Double click on a word or timestamp to jump to that point in the video.</span>\n      <span><FontAwesomeIcon className={ style.icon } icon={ faICursor } />Start typing to edit text.</span>\n      <span><FontAwesomeIcon className={ style.icon } icon={ faUserEdit } />You can add and change names of speakers in your transcript.</span>\n      <span><FontAwesomeIcon className={ style.icon } icon={ faKeyboard } />Use keyboard shortcuts for quick control.</span>\n      <span><FontAwesomeIcon className={ style.icon } icon={ faSave } />Save & export to get a copy to your desktop.</span>\n    </div>;\n\n    const tooltip = <Tooltip\n      className={ style.help }\n      content={ helpMessage }\n      fadeDuration={ 250 }\n      fadeEasing={ 'ease-in' }\n      placement={ 'bottom' }\n      radius={ 5 }>\n      <FontAwesomeIcon className={ style.icon } icon={ faQuestionCircle } />\n      How does this work?\n    </Tooltip>;\n\n    const currentWord = this.getCurrentWord(true); // arg is true, so scrolls if setting says to\n    const highlightColour = '#c0def3';\n    const unplayedColor = '#767676';\n    const correctionBorder = '1px dotted blue';\n\n    // Time to the nearest half second\n    const time = Math.round(this.props.currentTime * 4.0) / 4.0;\n\n    const editor = (\n      <section\n        className={ style.editor }\n        onDoubleClick={ event => this.handleDoubleClick(event) }>\n\n        <style scoped>\n          {`.Word[data-start=\"${ currentWord.start }\"] { background-color: ${ highlightColour }; text-shadow: 0 0 0.01px black }`}\n          {/*`div.Word[data-start=\"${ currentWord.start }\"]+span { background-color: ${ highlightColour } }` This would highlight edits that are added to the original. Doesn't highlight text before though...would have to use JS and dig into draft js more   */}\n          {`.Word[data-prev-times~=\"${ Math.floor(time) }\"] { color: ${ unplayedColor } }`}\n          {`.Word[data-prev-times~=\"${ time }\"] { color: ${ unplayedColor } }`}\n          {`.Word[data-confidence=\"low\"] { border-bottom: ${ correctionBorder } }`}\n        </style>\n\n        <Editor\n          editorState={ this.state.editorState }\n          onChange={ this.onChange }\n          stripPastedStyles\n          blockRendererFn={ this.renderBlockWithTimecodes }\n          handleKeyCommand={ command => this.handleKeyCommand(command) }\n          keyBindingFn={ e => this.customKeyBindingFn(e) }\n        />\n      </section>\n    );\n\n    return (\n      <section>\n        { tooltip }\n        <span onClick = { this.copyCurrentTimeToClipboard } style={ { cursor: 'pointer' } }><FontAwesomeIcon icon={ faShareSquare } title=\"Share Current Time\"/>&nbsp;Share Current Time</span>\n        { this.props.transcriptData !== null ? editor : null }\n      </section>\n    );\n  }\n}\n\n// DraftJs decorator to recognize which entity is which\n// and know what to apply to what component\n  /*\nconst getEntityStrategy = mutability => (contentBlock, callback, contentState) => {\n  contentBlock.findEntityRanges((character) => {\n    const entityKey = character.getEntity();\n    if (entityKey === null) {\n      return false;\n    }\n\n    return contentState.getEntity(entityKey).getMutability() === mutability;\n  }, callback);\n};\n\n// decorator definition - Draftjs\n// defines what to use to render the entity\nconst decorator = new CompositeDecorator([\n  {\n    strategy: getEntityStrategy('MUTABLE'),\n    component: Word,\n  },\n]);\n*/ // NOTE no longer using entities, so not really using the Word component in same way either, just using the WrapperBlock\n\nTimedTextEditor.propTypes = {\n  transcriptData: PropTypes.object,\n  mediaUrl: PropTypes.string,\n  isEditable: PropTypes.bool,\n  onWordClick: PropTypes.func,\n  sttJsonType: PropTypes.string,\n  isPlaying: PropTypes.func,\n  playMedia: PropTypes.func,\n  currentTime: PropTypes.number,\n  isScrollIntoViewOn: PropTypes.bool,\n  isPauseWhileTypingOn: PropTypes.bool,\n  timecodeOffset: PropTypes.number,\n  handleAnalyticsEvents: PropTypes.func\n};\n\nexport default TimedTextEditor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass VideoPlayer extends React.Component {\n  render() {\n    return (\n      <video\n        id=\"video\"\n        playsInline\n        src={ this.props.mediaUrl }\n        onTimeUpdate={ this.props.onTimeUpdate }\n        type=\"video/mp4\"\n        data-testid=\"media-player-id\"\n        onClick={ this.props.onClick }\n        onLoadedData={ this.props.onLoadedDataGetDuration }\n        ref={ this.props.videoRef }\n      />\n    );\n  }\n}\n\nVideoPlayer.propTypes = {\n  mediaUrl: PropTypes.string,\n  onTimeUpdate: PropTypes.func,\n  onClick: PropTypes.func,\n  videoRef: PropTypes.object,\n  onLoadedDataGetDuration: PropTypes.func\n};\n\nexport default VideoPlayer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './VolumeControl.module.css';\nclass VolumeControl extends React.Component {\n\n  render() {\n    return (\n      <div className={ styles.switchContainer }>\n        <label className={ styles.switch }>\n          <input type=\"checkbox\"\n            defaultChecked=\"true\"\n            onChange={ this.props.handleMuteVolume }\n          />\n          <span className={ styles.slider }></span>\n        </label>\n        <label className={ styles.label }>Volume</label>\n      </div>\n    );\n  }\n}\n\nVolumeControl.propTypes = {\n  handleMuteVolume: PropTypes.func\n};\n\nexport default VolumeControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './Select.module.css';\n\nclass Select extends React.Component {\n\n  render() {\n    const options = this.props.options.map((option, index) => {\n      // eslint-disable-next-line react/no-array-index-key\n      return <option key={ index } value={ option.value }>{option.label}</option>;\n    });\n\n    return (\n      <select className={ style.selectPlayerControl } name={ this.props.name } value={ this.props.currentValue } onChange={ this.props.handleChange }>\n        {options}\n      </select>\n    );\n  }\n}\n\nSelect.propTypes = {\n  options: PropTypes.array,\n  name: PropTypes.string,\n  currentValue: PropTypes.string,\n  handleChange: PropTypes.func\n};\n\nexport default Select;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport VolumeControl from './VolumeControl';\nimport Select from './Select';\n\nimport style from './PlayerControls.module.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n  faSave,\n  faTv,\n  faPlay,\n  faPause,\n  faBackward,\n  faForward,\n  faUndo\n} from '@fortawesome/free-solid-svg-icons';\n\nclass PlayerControls extends React.Component {\n  // to handle backward and forward mouse pressed on btn\n  // set a 300 ms  interval to repeat the\n  // backward or forward function\n  // on mouseUp the interval is cleared\n  setIntervalHelperBackward = () => {\n    this.props.skipBackward();\n    if (this.interval) {\n      this.clearIntervalHelper()\n    }\n    this.interval = setInterval(() => {\n      this.props.skipBackward();\n    }, 300);\n  }\n\n  setIntervalHelperForward = () => {\n    this.props.skipForward();\n    if (this.interval) {\n      this.clearIntervalHelper()\n    }\n    this.interval = setInterval(() => {\n      this.props.skipForward();\n    }, 300);\n  }\n\n  clearIntervalHelper = () => {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div className={ style.playerControls }>\n        <button\n          title=\"Rollback\"\n          className={ style.playerButton }\n          onClick={ this.props.rollback }>\n          <FontAwesomeIcon icon={ faUndo } />\n        </button>\n\n        <button\n          title=\"Rewind\"\n          className={ style.playerButton }\n          onMouseDown={ this.setIntervalHelperBackward }\n          onMouseUp={ this.clearIntervalHelper }>\n          <FontAwesomeIcon icon={ faBackward } />\n\n        </button>\n\n        <button\n          title=\"Play\"\n          className={ style.playerButton }\n          onClick={ this.props.playMedia }>\n          {this.props.isPlaying ? <FontAwesomeIcon icon={ faPause } /> : <FontAwesomeIcon icon={ faPlay } />}\n        </button>\n\n        <button\n          title=\"Forward\"\n          className={ style.playerButton }\n          onMouseDown={ this.setIntervalHelperForward }\n          onMouseUp={ this.clearIntervalHelper }>\n          <FontAwesomeIcon icon={ faForward } />\n        </button>\n\n        <span className={ style.playBackRate }>\n          <Select\n            title=\"Playback rate\"\n            options={ this.props.playbackRateOptions }\n            currentValue={ this.props.playbackRate.toString() }\n            name={ 'playbackRate' }\n            handleChange={ this.props.setPlayBackRate } />\n        </span>\n\n        <div className={ style.timeBox }>\n          <span title=\"Current time\" className={ style.currentTime }\n            onClick={ this.props.promptSetCurrentTime }\n          >{ this.props.currentTime }</span>\n          <span className={ style.separator }>|</span>\n          <span title=\"Clip duration\" className={ style.duration }>{this.props.duration}</span>\n        </div>\n\n        <button\n          title=\"Save\"\n          className={ style.playerButton }\n          onClick={ this.props.handleSaveTranscript }>\n          <FontAwesomeIcon icon={ faSave } />\n        </button>\n\n        <button\n          title=\"Picture-in-picture\"\n          className={ style.playerButton }\n          onClick={ this.props.pictureInPicture }\n        >\n          <FontAwesomeIcon icon={ faTv } />\n        </button>\n\n        <VolumeControl\n          handleMuteVolume={ this.props.handleMuteVolume }\n        />\n      </div>\n    );\n  }\n}\n\nPlayerControls.propTypes = {\n  playMedia: PropTypes.func,\n  currentTime: PropTypes.string,\n  timecodeOffset: PropTypes.string,\n  promptSetCurrentTime: PropTypes.func,\n  rollback: PropTypes.func,\n  handleMuteVolume: PropTypes.func,\n  duration: PropTypes.string,\n  isPlaying: PropTypes.bool,\n  skipBackward: PropTypes.func,\n  skipForward: PropTypes.func,\n  playbackRate: PropTypes.number,\n  playbackRateOptions: PropTypes.array,\n  setPlayBackRate: PropTypes.func,\n  pictureInPicture: PropTypes.func\n};\n\nexport default PlayerControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './ProgressBar.module.css';\n\nclass ProgressBar extends React.Component {\n\n  render() {\n    return (\n      <div className={ style.progress }>\n        <input\n          type='range'\n          className={ style.bar }\n          onChange={ this.props.buttonClick }\n          value={ this.props.value }\n          min='0'\n          max={ this.props.max.toString() }\n        />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  value: PropTypes.number,\n  max: PropTypes.string,\n  buttonClick: PropTypes.func\n};\n\nexport default ProgressBar;\n","function returnHotKeys(self) {\n  return {\n    'alt+k': {\n      priority: 1,\n      handler: () => {\n        self.togglePlayMedia();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+k',\n          name: 'togglePlayMedia',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + k',\n      label: 'Play Media',\n    },\n    'alt+l': {\n      priority: 1,\n      handler: () => {\n        self.skipForward();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+l',\n          name: 'skipForward',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + l',\n      label: 'Fast Forward',\n    },\n    /*'alt+j': {\n      priority: 1,\n      handler: () => {\n        self.skipBackward();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+j',\n          name: 'skipBackward',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + j',\n      label: 'Rewind',\n    },*/\n    'alt+-': {\n      priority: 1,\n      handler: () => {\n        self.decreasePlaybackRate();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+-',\n          name: 'decreasePlaybackRate',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + -',\n      label: 'Decrease Playback Speed',\n    },\n    // https://github.com/ccampbell/mousetrap/issues/266\n    'alt+=': {\n      priority: 1,\n      handler: () => {\n        self.increasePlaybackRate();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+plus',\n          name: 'increasePlaybackRate',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + +',\n      label: 'Increase Playback Speed',\n    },\n    'alt+u': {\n      priority: 1,\n      handler: () => {\n        self.jumpToStartOfBlock();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+u',\n          name: 'jumpToStartOfBlock',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + u',\n      label: 'Jump to Start of Current Section',\n    },\n    /*\n    'alt+h': {\n      priority: 1,\n      handler: () => {\n        self.editCurrentBlockTime();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+h',\n          name: 'editCurrentBlockTime',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + h',\n      label: 'Edit Current Section Time',\n    },*/\n    'alt+j': {\n      priority: 1,\n      handler: () => {\n        self.rollBack();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+j',\n          name: 'rollBack',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + j',\n      label: 'Roll Back',\n    },\n    'alt+t': {\n      priority: 1,\n      handler: () => {\n        self.promptSetCurrentTime();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+t',\n          name: 'promptSetCurrentTime',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + t',\n      label: 'set current time',\n    }\n  };\n}\nexport default returnHotKeys;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { hotkeys } from 'react-keyboard-shortcuts';\n\nimport VideoPlayer from './VideoPlayer';\nimport PlayerControls from './PlayerControls';\nimport ProgressBar from './ProgressBar';\n\nimport returnHotKeys from './defaultHotKeys';\nimport styles from './index.module.css';\n\nimport { secondsToTimecode, timecodeToSeconds } from '../../Util/timecode-converter/index';\nimport { timingSafeEqual } from 'crypto';\nimport { convertToArabicNumbers } from '../../Util/khmer-numbers/';\n\nconst PLAYBACK_RATES = [\n  //  { value: 0.2, label: '0.2' },\n  { value: 0.5, label: '0.5' },\n  { value: 0.6, label: '0.6' },\n  { value: 0.75, label: '0.75' },\n  { value: 1, label: '1' },\n  { value: 1.25, label: '1.25' },\n  { value: 1.5, label: '1.5' },\n  { value: 1.75, label: '1.75' },\n  // { value: 2, label: '2' },\n  // { value: 2.5, label: '2.5' },\n  // { value: 3, label: '3' },\n  // { value: 3.5, label: '3.5' }\n];\n\nclass MediaPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n\n    this.state = {\n      playbackRate: 1,\n      rollBackValueInSeconds: this.props.rollBackValueInSeconds,\n      timecodeOffset: this.props.timecodeOffset,\n      hotKeys: returnHotKeys(this),\n      isPlaying: false,\n      playbackRateOptions: PLAYBACK_RATES,\n      mediaDuration: '00:00:00:00',\n    };\n  }\n  /*eslint-disable camelcase */\n  hot_keys = returnHotKeys(this);\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.timecodeOffset !== null) {\n      let newCurrentTimeInSeconds = nextProps.timecodeOffset ;\n      if (typeof newCurrentTimeInSeconds ==='string'\n        && newCurrentTimeInSeconds.includes(':')\n        && !newCurrentTimeInSeconds.includes('NaN')) {\n        newCurrentTimeInSeconds = timecodeToSeconds(nextProps.timecodeOffset );\n      }\n\n      return {\n        timecodeOffset: newCurrentTimeInSeconds,\n        rollBackValueInSeconds: nextProps.rollBackValueInSeconds,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    this.props.hookSeek(this.setCurrentTime);\n    this.props.hookPlayMedia(this.togglePlayMedia);\n    this.props.hookIsPlaying(this.isPlaying);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.playingWhileListening && !prevProps.playingWhileListening) {\n      this.setCurrentTime(0);\n      this.playMedia()\n    }\n  }\n\n  setCurrentTime = (newCurrentTime) => {\n    if (newCurrentTime !== '' && newCurrentTime !== null) {\n    // hh:mm:ss:ff - mm:ss - m:ss - ss - seconds number or string and hh:mm:ss\n      const newCurrentTimeInSeconds = timecodeToSeconds(newCurrentTime);\n      if (this.videoRef.current !== null && !isNaN(newCurrentTimeInSeconds)) {\n        const videoRef = this.videoRef.current;\n\n        if (videoRef.readyState === 4) {\n          videoRef.currentTime = newCurrentTimeInSeconds;\n          this.playMedia();\n        }\n      } else {\n        console.log(\"failed to jump to time:\", newCurrentTimeInSeconds, newCurrentTime)\n      }\n    }\n  }\n\n  /**\n   * Prompts for a time stamp or time code to set media current time\n   * Also handles use can when the user has set a timecode offset via settings\n   * and the prompt is expected to be relative to that offset\n   */\n  promptSetCurrentTime = () => {\n    let userTimecodeValue = prompt('Jump to time - hh:mm:ss:ff hh:mm:ss mm:ss m:ss m.ss seconds');\n    // TODO: add some validation, eg if user types just a string it won't crash.\n    // needs function to check it's either timecode on the formats specified above or a number\n    // this could be part of the timecode module(?)\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'promptSetCurrentTime',\n        name: 'userTimecodeValue',\n        value: userTimecodeValue\n      });\n    }\n    // user clicks cancel to prompt, prompt returns null\n    if (userTimecodeValue !== null) {\n      userTimecodeValue = convertToArabicNumbers(userTimecodeValue)\n\n      if (userTimecodeValue.includes(':')) {\n        userTimecodeValue = timecodeToSeconds(userTimecodeValue);\n      }\n      // remove timecode offset if preset\n      if (this.state.timecodeOffset !== 0) {\n        userTimecodeValue -= this.state.timecodeOffset;\n      }\n\n      this.setCurrentTime(userTimecodeValue);\n    }\n  }\n\n  setTimeCodeOffset = (newTimeCodeOffSet) => {\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'setTimeCodeOffset',\n        name: 'timecodeOffsetValue',\n        value: newTimeCodeOffSet\n      });\n    }\n\n    if (newTimeCodeOffSet !== '' && newTimeCodeOffSet !== null) {\n      // use similar helper function from above to convert\n      let newCurrentTimeInSeconds = newTimeCodeOffSet;\n      if (newTimeCodeOffSet.includes(':')) {\n        newCurrentTimeInSeconds = timecodeToSeconds(newTimeCodeOffSet);\n        this.setState({ timecodeOffset: newCurrentTimeInSeconds });\n      }\n    }\n  }\n\n  rollBack = () => {\n    if (this.videoRef.current !== null) {\n\n      if (this.props.handleAnalyticsEvents !== undefined) {\n        this.props.handleAnalyticsEvents({\n          category: 'MediaPlayer',\n          action: 'rollBack',\n          name: 'rollBackValue',\n          value: this.state.rollBackValueInSeconds\n        });\n      }\n      // get video duration\n      const videoElem = this.videoRef.current;\n      const tmpDesiredCurrentTime = videoElem.currentTime - this.state.rollBackValueInSeconds;\n      // > 0 < duration of video\n      this.setCurrentTime(tmpDesiredCurrentTime);\n\n    }\n  }\n\n  jumpToStartOfBlock = () => {\n    // NOTE this is so bad...so messy. Oh well\n    const currentWord = this.props.timedTextEditorRef.getCurrentWord()\n    if (this.videoRef.current !== null) {\n\n      if (this.props.handleAnalyticsEvents !== undefined) {\n        this.props.handleAnalyticsEvents({\n          category: 'MediaPlayer',\n          action: 'jumpToStartOfBlock',\n          name: 'jumpToStartOfBlock',\n          value: currentWord.start\n        });\n      }\n      // some blocks don't have start time set due to data getting messed up, so just rollback\n      currentWord.start ? this.setCurrentTime(currentWord.start) : this.rollback()\n\n    }\n  }\n\n    /*  TODO use refs on all blocks to access the WrapperBlock react child, and then call the edit block time func\n  editCurrentBlockTime = () => {\n    // NOTE this is so bad...so messy. Oh well\n    console.log(this.props.timedTextEditorRef)\n    const currentWord = this.props.timedTextEditorRef.getCurrentWord()\n    if (this.videoRef.current !== null) {\n\n      if (this.props.handleAnalyticsEvents !== undefined) {\n        this.props.handleAnalyticsEvents({\n          category: 'MediaPlayer',\n          action: 'editCurrentBlockTime',\n          name: 'editCurrentBlockTime',\n          value: currentWord.start\n        });\n      }\n      // some blocks don't have start time set due to data getting messed up, so just rollback\n      currentWord.start ? this.setCurrentTime(currentWord.start) : this.rollback()\n\n    }\n  }\n  */\n\n  handleTimeUpdate = (e) => {\n    this.props.hookOnTimeUpdate(e.target.currentTime);\n  }\n\n  handlePlayBackRateChange = (e) => {\n    this.setPlayBackRate(parseFloat(e.target.value));\n  }\n\n  /**\n   * @param {float} input - playback rate value as a float\n   */\n  setPlayBackRate = (input) => {\n    if (this.videoRef.current !== null) {\n      if (input >= 0.2 && input <= 3.5) {\n        this.setState({\n          playbackRate: input,\n        }, () => {\n          this.videoRef.current.playbackRate = input;\n\n          if (this.props.handleAnalyticsEvents !== undefined) {\n            this.props.handleAnalyticsEvents({\n              category: 'MediaPlayer',\n              action: 'setPlayBackRate',\n              name: 'playbackRateNewValue',\n              value: input\n            });\n          }\n\n        });\n      }\n    }\n  }\n\n  decreasePlaybackRate = () => {\n    const speeds = [ ...PLAYBACK_RATES ].reverse();\n    const slower = speeds.find((option) => {\n      return option.value < this.state.playbackRate;\n    });\n    const newSpeed = slower ? slower.value : 0.2;\n\n    this.setPlayBackRate(newSpeed);\n  }\n\n  increasePlaybackRate = () => {\n    const speeds = [ ...PLAYBACK_RATES ];\n    const faster = speeds.find((option) => {\n      return option.value > this.state.playbackRate;\n    });\n    const newSpeed = faster ? faster.value : 3.5;\n\n    this.setPlayBackRate(newSpeed);\n  }\n\n  handleChangeReplayRollbackValue = (e) => {\n    if (this.videoRef.current !== null) {\n      this.setState({\n        rollBackValueInSeconds: e.target.value,\n      });\n    }\n  }\n\n  handleMuteVolume = () => {\n    if (this.videoRef.current !== null) {\n      if (this.videoRef.current.volume > 0) {\n        this.videoRef.current.volume = 0;\n      } else {\n        this.videoRef.current.volume = 1;\n      }\n    }\n  }\n\n  // TEMP: keeping this in for now. Might be replaced by state\n  // The pauseWhileTyping logic (in TimedTextEditor) currently uses this\n  isPlaying = () => {\n    if (this.videoRef.current !== null) {\n      if (this.videoRef.current.paused) return false;\n\n      return true;\n    }\n  }\n\n  pauseMedia = () => {\n    this.setState({ isPlaying: false }, () => this.videoRef.current.pause());\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'pauseMedia',\n        name: 'pauseMedia',\n        value: secondsToTimecode(this.videoRef.current.currentTime)\n      });\n    }\n  }\n\n  playMedia = () => {\n    this.setState({ isPlaying: true }, () => this.videoRef.current.play());\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'playMedia',\n        name: 'playMedia',\n        value: secondsToTimecode(this.videoRef.current.currentTime)\n      });\n    }\n\n  }\n\n  // Sets isPlaying state and toggles modes on the video player\n  // TODO: modularise these / enable specific play / pause action\n  togglePlayMedia = (e, bool) => {\n    // if no bool specified, then really just toggle\n    if (bool === undefined) {\n      bool = !this.state.isPlaying\n    }\n    if (this.videoRef.current !== null) {\n      if (this.state.isPlaying && !bool) {\n        this.pauseMedia();\n      }\n      else if (!this.state.isPlaying && bool) {\n        this.playMedia();\n      }\n      // in other situations, do nothing\n    }\n  }\n\n  skipForward = () => {\n    if (this.videoRef.current !== null) {\n      // TODO track this?\n      const currentTime = this.videoRef.current.currentTime;\n      const newCurrentTimeIncreased = currentTime + 10;\n      const newCurrentTime = Number((newCurrentTimeIncreased).toFixed(1));\n      this.setCurrentTime(newCurrentTime);\n    }\n  }\n\n  skipBackward = () => {\n    // TODO track this?\n    if (this.videoRef.current !== null) {\n      const currentTime = this.videoRef.current.currentTime;\n      const newCurrentTimeIncreased = currentTime - 10;\n      const newCurrentTime = Number((newCurrentTimeIncreased).toFixed(1));\n      this.setCurrentTime(newCurrentTime);\n    }\n  }\n\n  handleProgressBarClick = (e) => {\n    const time = e.target.value;\n    this.setCurrentTime(time);\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'handleProgressBarClick',\n        name: 'roundNewCurrentTime',\n        value: time\n      });\n    }\n  }\n\n  getMediaCurrentTime = () => {\n    if (this.videoRef.current !== null) {\n      return secondsToTimecode(this.videoRef.current.currentTime + this.state.timecodeOffset);\n    }\n\n    return '00:00:00:00';\n  }\n  handleMediaDurationChange =(e) => {\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'mediaDuration',\n        name: secondsToTimecode(e.target.duration),\n        value: e.target.duration\n      });\n    }\n  }\n\n  // also now sets default start Time\n  onLoadedDataGetDuration = (e) => {\n    const currentDuration = e.target.duration;\n    const currentDurationWithOffset = currentDuration + this.state.timecodeOffset;\n\n    const durationInSeconds = secondsToTimecode(currentDurationWithOffset);\n\n    this.setState({\n      mediaDuration: durationInSeconds\n    });\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'onLoadedDataGetDuration',\n        name: 'durationInSeconds-WithoutOffset',\n        value: secondsToTimecode( currentDuration)\n      });\n    }\n\n    this.setCurrentTime(this.props.defaultStartTime)\n  }\n\n  handlePictureInPicture = () => {\n    if (this.videoRef.current !== null) {\n      if (document.pictureInPictureElement !== undefined) {\n      // from https://developers.google.com/web/updates/2017/09/picture-in-picture\n        if (!document.pictureInPictureElement) {\n\n          this.props.handleAnalyticsEvents({\n            category: 'MediaPlayer',\n            action: 'handlePictureInPicture',\n            name: 'turning-picture-in-picture-on'\n          });\n\n          this.videoRef.current.requestPictureInPicture()\n            .catch(error => {\n              // Video failed to enter Picture-in-Picture mode.\n              console.error('Video failed to enter Picture-in-Picture mode', error);\n\n              this.props.handleAnalyticsEvents({\n                category: 'MediaPlayer',\n                action: 'handlePictureInPicture',\n                name: 'turning-picture-in-picture-on-error'\n              });\n\n            });\n\n        } else {\n          this.props.handleAnalyticsEvents({\n            category: 'MediaPlayer',\n            action: 'handlePictureInPicture',\n            name: 'turning-picture-in-picture-off'\n          });\n          document.exitPictureInPicture()\n            .catch(error => {\n              // Video failed to leave Picture-in-Picture mode.\n              console.error('Video failed to leave Picture-in-Picture mode', error);\n\n              this.props.handleAnalyticsEvents({\n                category: 'MediaPlayer',\n                action: 'handlePictureInPicture',\n                name: 'turning-picture-in-picture-off-error'\n              });\n            });\n        }\n      } else {\n        alert('Picture in Picture not supported in this browser, try chrome.');\n\n        this.props.handleAnalyticsEvents({\n          category: 'MediaPlayer',\n          action: 'handlePictureInPicture',\n          name: 'picture-in-picture-not-supported'\n        });\n\n      }\n    }\n  }\n\n  render() {\n    const player = <VideoPlayer\n      mediaUrl={ this.props.mediaUrl }\n      onTimeUpdate= { this.handleTimeUpdate }\n      onClick= { this.togglePlayMedia.bind(this) }\n      videoRef={ this.videoRef }\n      onLoadedDataGetDuration={ this.onLoadedDataGetDuration }\n    />;\n\n    const playerControlsSection = (\n      <div className={ styles.controlsSection }>\n        <div className={ styles.titleBox }>\n          <h1 className={ styles.title }>{ this.props.fileName? this.props.fileName : this.props.mediaUrl }</h1>\n        </div>\n        <PlayerControls\n          playMedia={ this.togglePlayMedia.bind(this) }\n          isPlaying={ this.state.isPlaying }\n          playbackRate={ this.state.playbackRate }\n          skipBackward={ this.skipBackward.bind(this) }\n          skipForward={ this.skipForward.bind(this) }\n          rollback={ this.rollBack }\n          currentTime={ this.getMediaCurrentTime() }\n          duration={ this.state.mediaDuration }\n          onSetCurrentTime={ '' }\n          onSetTimecodeOffset={ '' }\n          promptSetCurrentTime={ this.promptSetCurrentTime.bind(this) }\n          setTimeCodeOffset={ this.setTimeCodeOffset.bind(this) }\n          timecodeOffset={ secondsToTimecode(this.state.timecodeOffset) }\n          handleMuteVolume={ this.handleMuteVolume.bind(this) }\n          setPlayBackRate={ this.handlePlayBackRateChange.bind(this) }\n          playbackRateOptions={ this.state.playbackRateOptions }\n          pictureInPicture={ this.handlePictureInPicture }\n          handleSaveTranscript={ () => {this.props.handleSaveTranscript();} }\n        />\n      </div>\n    );\n\n    const progressBar = <ProgressBar\n      max={ this.videoRef.current !== null ? parseInt(this.videoRef.current.duration).toString() : '100' }\n      value={ this.videoRef.current !== null ? parseInt(this.videoRef.current.currentTime) : 0 }\n      buttonClick={ this.handleProgressBarClick.bind(this) }\n    />;\n\n    return (\n      <section className={ styles.topSection }>\n        <div className={ styles.playerSection }>\n          { this.props.mediaUrl !== null ? player : null }\n          { this.props.mediaUrl !== null ? playerControlsSection : null }\n        </div>\n        { this.props.mediaUrl !== null ? progressBar : null }\n      </section>\n    );\n  }\n}\n\nMediaPlayer.propTypes = {\n  fileName: PropTypes.string,\n  hookSeek: PropTypes.func,\n  hookPlayMedia: PropTypes.func,\n  hookIsPlaying: PropTypes.func,\n  mediaUrl: PropTypes.string,\n  hookOnTimeUpdate: PropTypes.func,\n  rollBackValueInSeconds: PropTypes.number,\n  timecodeOffset: PropTypes.number\n};\n\nexport default hotkeys(MediaPlayer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './index.module.css';\n\nclass Toggle extends React.Component {\n  render() {\n    return (\n      <div className={ style.switchContainer }>\n        <label className={ style.switch }>\n          <input type='checkbox'\n            defaultChecked={ this.props.defaultValue }\n            onChange={ this.props.handleToggle }\n          />\n          <span className={ style.slider }></span>\n        </label>\n      </div>\n    );\n  }\n}\n\nToggle.propTypes = {\n  handleToggle: PropTypes.func,\n  label: PropTypes.string,\n  defaultValue: PropTypes.bool\n};\n\nexport default Toggle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './index.module.css';\n\nimport { timecodeToSeconds, secondsToTimecode } from '../../../Util/timecode-converter/index';\n\nclass TimecodeOffset extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timecodeOffset: secondsToTimecode(this.props.timecodeOffset)\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      timecodeOffset: e.target.value\n    });\n  }\n\n  resetTimecodeOffset = () => {\n    const resetTimecodeOffsetValue = 0;\n\n    this.props.handleAnalyticsEvents({\n      category: 'TimecodeOffset',\n      action: 'resetTimecodeOffset',\n      name: 'resetTimecodeOffset',\n      value: 0\n    });\n\n    this.setState({\n      timecodeOffset: secondsToTimecode(resetTimecodeOffsetValue)\n    }, () => {\n      this.props.handleSetTimecodeOffset(resetTimecodeOffsetValue);\n    });\n  }\n\n  setTimecodeOffset = () => {\n    this.props.handleAnalyticsEvents({\n      category: 'TimecodeOffset',\n      action: 'setTimecodeOffset',\n      name: 'setTimecodeOffset',\n      value: this.state.timecodeOffset\n    });\n\n    let newCurrentTimeInSeconds = this.state.timecodeOffset;\n    if (typeof newCurrentTimeInSeconds ==='string'\n    && newCurrentTimeInSeconds.includes(':')\n    && !newCurrentTimeInSeconds.includes('NaN')) {\n      newCurrentTimeInSeconds = timecodeToSeconds(newCurrentTimeInSeconds );\n    }\n    this.props.handleSetTimecodeOffset(newCurrentTimeInSeconds);\n  }\n\n  render() {\n    return (\n      <div className={ style.offsetContainer }>\n        <input\n          className={ style.inputBox }\n          type=\"text\"\n          value={ this.state.timecodeOffset }\n          onChange={ this.handleChange }\n          name=\"lname\"/>\n        <span className={ style.button } onClick={ this.resetTimecodeOffset }><u>Reset</u></span>\n        <span> | </span>\n        <span className={ style.button } onClick={ this.setTimecodeOffset }><u>Save</u></span>\n      </div>\n    );\n  }\n}\n\nTimecodeOffset.propTypes = {\n  handleSetTimecodeOffset: PropTypes.func,\n  onChange: PropTypes.func,\n  timecodeOffset: PropTypes.number\n};\n\nexport default TimecodeOffset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\n\nimport Toggle from './Toggle/';\n\nimport style from './index.module.css';\n\nimport TimecodeOffset from './TimecodeOffset';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div className={ style.settings }>\n        <h2 className={ style.header }>Settings Panel</h2>\n        <div className={ style.closeButton } onClick={ this.props.handleSettingsToggle }>\n          <FontAwesomeIcon icon={ faWindowClose } />\n        </div>\n\n        <div className={ style.controlsContainer }>\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Pause While Typing</div>\n            <Toggle\n              defaultValue={ this.props.defaultValuePauseWhileTyping }\n              label={ 'Pause while typing' }\n              handleToggle={ this.props.handlePauseWhileTyping }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Scroll Sync</div>\n            <Toggle\n              defaultValue={ this.props.defaultValueScrollSync }\n              label={ 'ScrollSync' }\n              handleToggle={ this.props.handleIsScrollIntoViewChange }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Rollback Interval (sec)</div>\n            <input\n              className={ style.rollbackValue }\n              type=\"text\"\n              value={ this.props.defaultRollBackValueInSeconds }\n              onChange={ this.props.handleRollBackValueInSeconds }\n              name=\"lname\"/>\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Show Timecodes</div>\n            <Toggle\n              defaultValue={ this.props.showTimecodes }\n              label={ 'Hide Timecodes' }\n              handleToggle={ this.props.handleShowTimecodes }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Show Speaker Labels</div>\n            <Toggle\n              defaultValue={ this.props.showSpeakers }\n              label={ 'Hide Speaker Labels' }\n              handleToggle={ this.props.handleShowSpeakers }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.timecodeLabel }>Timecode Offset ℹ</div>\n            <TimecodeOffset\n              timecodeOffset={ this.props.timecodeOffset }\n              handleSetTimecodeOffset={ this.props.handleSetTimecodeOffset }\n              handleAnalyticsEvents={ this.props.handleAnalyticsEvents }\n            />\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  showTimecodes: PropTypes.bool,\n  showSpeakers: PropTypes.bool,\n  timecodeOffset: PropTypes.number,\n  handleShowTimecodes: PropTypes.func,\n  handleShowSpeakers: PropTypes.func,\n  handleSetTimecodeOffset: PropTypes.func,\n  handleSettingsToggle: PropTypes.func,\n  handlePauseWhileTyping: PropTypes.func,\n  handleIsScrollIntoViewChange: PropTypes.func,\n  handleRollBackValueInSeconds: PropTypes.func,\n  defaultValueScrollSync: PropTypes.bool,\n  defaultValuePauseWhileTyping: PropTypes.bool,\n  defaultRollBackValueInSeconds: PropTypes.number\n};\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\n\nimport returnHotKeys from '../MediaPlayer/defaultHotKeys';\n\nimport style from './Shortcuts.module.css';\n\nclass Shortcuts extends React.Component {\n  render() {\n    const hotKeys = returnHotKeys(this);\n    const hotKeysCheatsheet = Object.keys(hotKeys).map((key, i) => {\n    \tconst shortcut = hotKeys[key];\n\n      return <li key={ i } className={ style.listItem }>\n        <div className={ style.shortcut }>{shortcut.displayKeyCombination}</div>\n        <div className={ style.shortcutLabel }>{shortcut.label}</div>\n      </li>;\n    });\n\n    return (\n      <div className={ style.shortcuts }>\n        <h2 className={ style.header }>Shortcuts</h2>\n        <div className={ style.closeButton } onClick={ this.props.handleShortcutsToggle }>\n          <FontAwesomeIcon icon={ faWindowClose } />\n        </div>\n        <ul className={ style.list }>{ hotKeysCheatsheet }</ul>\n      </div>\n    );\n  }\n}\n\nShortcuts.propTypes = {\n  handleShortcutsToggle: PropTypes.func\n};\n\nexport default Shortcuts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog, faKeyboard } from '@fortawesome/free-solid-svg-icons';\n\nimport TimedTextEditor from './TimedTextEditor';\nimport MediaPlayer from './MediaPlayer';\nimport Settings from './Settings';\nimport Shortcuts from './Settings/Shortcuts';\nimport { secondsToTimecode } from '../Util/timecode-converter/index';\n\nimport style from './index.module.css';\n\nconst urlParams = new URLSearchParams(window.location.search);\n\nclass TranscriptEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let startTime = urlParams.has('startTime') ? parseFloat(urlParams.get('startTime')) : 0;\n    if (isNaN(startTime)) {\n      startTime = 0\n    }\n\n    this.state = {\n      defaultStartTime: startTime,\n      currentTime: startTime,\n      lastLocalSavedTime: '',\n      transcriptData: null,\n      isScrollIntoViewOn: true,\n      showSettings: false,\n      showShortcuts: false,\n      isPauseWhileTypingOn: true,\n      rollBackValueInSeconds: 5,\n      timecodeOffset: 0,\n      showTimecodes: true,\n      showSpeakers: true\n    };\n    this.timedTextEditorRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.transcriptData !== null) {\n      return {\n        transcriptData: nextProps.transcriptData\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Transcript and media passed to component at same time\n    if (\n      (prevState.transcriptData !== this.state.transcriptData)\n        && (prevProps.mediaUrl !== this.props.mediaUrl )\n    ) {\n      console.info('Transcript and media');\n      this.ifPresentRetrieveTranscriptFromLocalStorage();\n    }\n    // Transcript first and then media passed to component\n    else if (\n      (prevState.transcriptData === this.state.transcriptData)\n      && (prevProps.mediaUrl !== this.props.mediaUrl)\n    ) {\n      console.info('Transcript first and then media');\n      this.ifPresentRetrieveTranscriptFromLocalStorage();\n    }\n    // Media first and then transcript passed to component\n    else if (\n      (prevState.transcriptData !== this.state.transcriptData)\n      && (prevProps.mediaUrl === this.props.mediaUrl)\n    ) {\n      console.info('Media first and then transcript');\n      this.ifPresentRetrieveTranscriptFromLocalStorage();\n    }\n  }\n\n  ifPresentRetrieveTranscriptFromLocalStorage = () => {\n    // if (this.timedTextEditorRef.current!== undefined) {\n    if (this.timedTextEditorRef.current) {\n      if (this.timedTextEditorRef.current.isPresentInLocalStorage(this.props.mediaUrl)) {\n        console.info('was already present in local storage');\n        this.timedTextEditorRef.current.loadLocalSavedData(this.props.mediaUrl);\n      } else {\n        console.info('not present in local storage');\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  // when double click a single word\n    /* handleWordClick = (startTime) => {\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'doubleClickOnWord',\n        name: 'startTime',\n        value: secondsToTimecode(startTime)\n      });\n    }\n\n    this.jumpToHere(startTime)\n  }*/\n\n  handleJumpToHereClick = (startTime) => {\n    this.jumpToHere(startTime)\n  }\n\n  jumpToHere = (startTime) => {\n    // TODO add analytics stuff...except I don't care right now haha\n\n    // happens if the data gets messed up and they click on a paragraph that has that faulty data\n    // TODO allow editing timing so this can get fixed\n    if ([ NaN, undefined ].includes(startTime)) {\n      console.error(\"startTime cannot be set to be NaN or undefined\");\n\n      return\n    }\n    this.setCurrentTime(startTime);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  handleTimeUpdate = (currentTime) => {\n    this.setState({\n      currentTime,\n    });\n  }\n\n  handlePlayMedia = (bool) => {\n    this.playMedia(null, bool);\n  }\n\n  handleIsPlaying = () => {\n    return this.isPlaying();\n  }\n\n  handleIsScrollIntoViewChange = (e) => {\n    const isChecked = e.target.checked;\n    this.setState({ isScrollIntoViewOn: isChecked });\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'handleIsScrollIntoViewChange',\n        name: 'isScrollIntoViewOn',\n        value: isChecked\n      });\n    }\n\n  }\n  handlePauseWhileTyping = (e) => {\n    const isChecked = e.target.checked;\n    this.setState({ isPauseWhileTypingOn: isChecked });\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'handlePauseWhileTyping',\n        name: 'isPauseWhileTypingOn',\n        value: isChecked\n      });\n    }\n  }\n\n  handleRollBackValueInSeconds = (e) => {\n    const rollBackValue = e.target.value;\n    this.setState({ rollBackValueInSeconds: rollBackValue });\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'handleRollBackValueInSeconds',\n        name: 'rollBackValueInSeconds',\n        value: rollBackValue\n      });\n    }\n  }\n\n  handleSetTimecodeOffset = (timecodeOffset) => {\n\n    this.setState({ timecodeOffset: timecodeOffset },\n      () => {\n        // eslint-disable-next-line react/no-string-refs\n        this.timedTextEditorRef.current.forceUpdate();\n      });\n  }\n\n  handleShowTimecodes = (e) => {\n    const isChecked = e.target.checked;\n    this.setState({ showTimecodes: isChecked });\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'handleShowTimecodes',\n        name: 'showTimecodes',\n        value: isChecked\n      });\n    }\n  }\n\n  handleShowSpeakers = (e) => {\n    const isChecked = e.target.checked;\n    this.setState({ showSpeakers: isChecked });\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'handleShowSpeakers',\n        name: 'showSpeakers',\n        value:  isChecked\n      });\n    }\n  }\n\n  handleSettingsToggle = () => {\n    this.setState(prevState => ({\n      showSettings: !prevState.showSettings\n    }));\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'handleSettingsToggle',\n        name: 'showSettings',\n        value:  !this.state.showSettings\n      });\n    }\n  }\n\n  handleShortcutsToggle = () => {\n    this.setState(prevState => ({\n      showShortcuts: !prevState.showShortcuts\n    }));\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TranscriptEditor',\n        action: 'handleShortcutsToggle',\n        name: 'showShortcuts',\n        value:  !this.state.showShortcuts\n      });\n    }\n  }\n\n  getEditorContent = (exportFormat) => {\n    return this.timedTextEditorRef.current.getEditorContent(exportFormat);\n  }\n\n  handleSaveTranscript = () => {\n    return this.timedTextEditorRef.current.localSave(this.props.mediaUrl);\n  }\n\n  render() {\n    const mediaPlayer = <MediaPlayer\n      fileName={ this.props.fileName }\n      hookSeek={ foo => this.setCurrentTime = foo }\n      hookPlayMedia={ foo => this.playMedia = foo }\n      hookIsPlaying={ foo => this.isPlaying = foo }\n      rollBackValueInSeconds={ this.state.rollBackValueInSeconds }\n      timecodeOffset={ this.state.timecodeOffset }\n      hookOnTimeUpdate={ this.handleTimeUpdate }\n      mediaUrl={ this.props.mediaUrl }\n      // ref={ 'MediaPlayer' }\n      handleAnalyticsEvents={ this.props.handleAnalyticsEvents }\n      handleSaveTranscript={ this.handleSaveTranscript }\n      playingWhileListening = { this.props.playingWhileListening }\n      timedTextEditorRef = { this.timedTextEditorRef.current }\n      defaultStartTime = { this.state.defaultStartTime } \n    />;\n\n    const settings = <Settings\n      handleSettingsToggle={ this.handleSettingsToggle }\n      defaultValuePauseWhileTyping={ this.state.isPauseWhileTypingOn }\n      defaultValueScrollSync={ this.state.isScrollIntoViewOn }\n      defaultRollBackValueInSeconds={ this.state.rollBackValueInSeconds }\n      timecodeOffset={ this.state.timecodeOffset }\n      showTimecodes={ this.state.showTimecodes }\n      showSpeakers={ this.state.showSpeakers }\n      handlePauseWhileTyping={ this.handlePauseWhileTyping }\n      handleIsScrollIntoViewChange={ this.handleIsScrollIntoViewChange }\n      handleRollBackValueInSeconds={ this.handleRollBackValueInSeconds }\n      handleSetTimecodeOffset={ this.handleSetTimecodeOffset }\n      handleShowTimecodes={ this.handleShowTimecodes }\n      handleShowSpeakers={ this.handleShowSpeakers }\n      handleAnalyticsEvents={ this.props.handleAnalyticsEvents }\n    />;\n\n    const shortcuts = <Shortcuts\n      handleShortcutsToggle={ this.handleShortcutsToggle }\n    />;\n\n    const timedTextEditor = <TimedTextEditor\n      fileName={ this.props.fileName }\n      transcriptData={ this.state.transcriptData }\n      timecodeOffset={ this.state.timecodeOffset }\n      onWordClick={ this.handleWordClick }\n      onJumpToHereClick={ this.handleJumpToHereClick }\n      playMedia={ this.handlePlayMedia }\n      isPlaying={ this.handleIsPlaying }\n      currentTime={ this.state.currentTime }\n      isEditable={ this.props.isEditable }\n      sttJsonType={ this.props.sttJsonType }\n      mediaUrl={ this.props.mediaUrl }\n      isScrollIntoViewOn={ this.state.isScrollIntoViewOn }\n      isPauseWhileTypingOn={ this.state.isPauseWhileTypingOn }\n      showTimecodes={ this.state.showTimecodes }\n      showSpeakers={ this.state.showSpeakers }\n      ref={ this.timedTextEditorRef }\n      handleAnalyticsEvents={ this.props.handleAnalyticsEvents }\n    />;\n\n    return (\n      <div className={ style.container }>\n        <header className={ style.header }>\n          { this.state.showSettings ? settings : null }\n          { this.state.showShortcuts ? shortcuts : null }\n        </header>\n\n        <aside className={ style.aside }>{ this.props.mediaUrl ? mediaPlayer : null }</aside>\n\n        <div className={ style.settingsContainer }>\n          <button className={ style.settingsButton } onClick={ this.handleSettingsToggle }>\n            <FontAwesomeIcon icon={ faCog } />\n          </button>\n          <button className={ style.settingsButton } onClick={ this.handleShortcutsToggle }>\n            <FontAwesomeIcon icon={ faKeyboard } />\n          </button>\n        </div>\n\n        <main className={ style.main }>\n          {this.props.mediaUrl === null? null : timedTextEditor}\n        </main>\n      </div>\n    );\n  }\n}\n\nTranscriptEditor.propTypes = {\n  mediaUrl: PropTypes.string,\n  isEditable: PropTypes.bool,\n  sttJsonType: PropTypes.string,\n  handleAnalyticsEvents: PropTypes.func,\n  fileName: PropTypes.string\n};\n\nexport default TranscriptEditor;\n","import SpeechRecognition from './SpeechRecognition'\n\nexport default SpeechRecognition\n","import React, { Component } from 'react'\n\nexport default function SpeechRecognition(options) {\n  const SpeechRecognitionInner = function (WrappedComponent) {\n    const BrowserSpeechRecognition =\n      typeof window !== 'undefined' &&\n      (window.SpeechRecognition ||\n        window.webkitSpeechRecognition ||\n        window.mozSpeechRecognition ||\n        window.msSpeechRecognition ||\n        window.oSpeechRecognition)\n    const recognition = BrowserSpeechRecognition\n      ? new BrowserSpeechRecognition()\n      : null\n    const browserSupportsSpeechRecognition = recognition !== null\n    let listening\n    if (\n      !browserSupportsSpeechRecognition ||\n      (options && options.autoStart === false)\n    ) {\n      listening = false\n    } else {\n      recognition.start()\n      listening = true\n    }\n    let pauseAfterDisconnect = false\n    let interimTranscript = ''\n    let finalTranscript = ''\n\n    // TODO put this as the retval key using template found in src/sample-data/KateDarling_2018S-bbc-kaldi.json\n    const newTranscriptData = () => ({\n      status: true,\n      wonid: \"octo:2692ea33-d595-41d8-bfd5-aa7f2d2f89ee\", // don't know this one, probably will generate something\n      punct: \"\", // total transcript of all the words TODO currently not setting\n      words: [], // array of newWordData objects\n    })\n    \n\n    return class SpeechRecognitionContainer extends Component {\n      constructor(props) {\n        super(props)\n\n        this.state = {\n          interimTranscript,\n          finalTranscript,\n          transcriptData: {},\n          listening: false,\n          allResults: [],\n          speechTimerStartedAt: false, // ms since Jan 1 1970\n        }\n\n        // TODO do the binding thing so don't have to do the crazy arrow funcs here\n      }\n\n      componentWillMount() {\n        if (recognition) {\n          recognition.continuous = false // originally set to true, but this breaks up the words into smaller fragments much better\n          recognition.interimResults = true\n          recognition.onresult = this.updateTranscript.bind(this)\n          recognition.onend = this.onRecognitionDisconnect.bind(this)\n          // onspeechstart/end or onsoundstart/end might be useful\n          /*\n    recognition.onspeechend = () => {console.log(\"speech is now ending\")}\n    recognition.onspeechstart = () => {console.log(\"speech is now starting\")}\n    recognition.onsoundstart = () => {console.log(\"sound is now starting\")}\n    recognition.onsoundend = () => {console.log(\"sound is now ending\")}\n    recognition.nomatch = () => {console.log(\"no match!!!11\")}\n    recognition.onboundary = () => {console.log(\"boundary found!\")}\n    recognition.onresume = () => {console.log(\"resume found!\")}\n    recognition.onmark = () => {console.log(\"mark found!\")}\n    recognition.onpause = () => {console.log(\"pause found!\")}\n    */\n          this.setState({\n            listening,\n            transcriptData: newTranscriptData()\n          })\n        }\n      }\n\n      disconnect (disconnectType) {\n        if (recognition) {\n          switch (disconnectType) {\n            case 'ABORT':\n              pauseAfterDisconnect = true\n              recognition.abort()\n              break\n            case 'RESET':\n              pauseAfterDisconnect = true\n              recognition.abort()\n              break\n            case 'STOP':\n            default:\n              pauseAfterDisconnect = true\n              recognition.stop()\n          }\n        }\n      }\n\n      // minutes elapsed since started.\n      minElapsed = () => {\n        return (Date.now() - this.state.speechTimerStartedAt)/1000;\n      }\n\n      newWordData = (wordResults) => {\n        const words = wordResults.transcript;\n        // remove all punctuation and lowercase it\n        const allWordData = this.state.transcriptData.words;\n        const start = allWordData.length > 0 ? allWordData[allWordData.length - 1].end : 0;\n        const end = this.minElapsed();\n        const punct = words.toLowerCase().replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '');\n\n        // format required for the bbc lib\n        return {\n          start, // time in minutes, using decimals not seconds, eg 13.02 (float)\n          confidence: wordResults.confidence, // %, out of 1, eg 0.68 (float)\n          end, // end time in min\n          word: words, // all words, not formatted (and lowercase), eg \"there\" (string)\n          punct, // word, as displayed, eg \"There\" (string)\n          index: allWordData.length,\n        }\n      }\n\n      onRecognitionDisconnect = () => {\n        listening = false\n        if (pauseAfterDisconnect) {\n          this.setState({ listening })\n        } else {\n          this.startListening()\n        }\n        pauseAfterDisconnect = false\n      }\n\n      // TODO might stop getting interim results and handling them if it hurts performance\n      updateTranscript = (event) => {\n        interimTranscript = ''\n        // looks like they iterate over same results every time, rather than gradually compiling as it goes. Could slow things down if transcript gets long TODO\n        let newState = {\n          // might not need\n          allResults: event.results\n        }\n\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n          if (event.results[i].isFinal) {\n            let wordResults = event.results[i][0]\n            finalTranscript = this.concatTranscripts(\n              finalTranscript,\n              wordResults.transcript\n            )\n\n            let newWordData = this.newWordData(wordResults)\n            //TODO bad practice modifying original object like this!\n            let transcriptData = this.state.transcriptData\n            transcriptData.words.push(newWordData)\n            \n            newState.finalTranscript = finalTranscript\n            newState.transcriptData = transcriptData\n\n          } else {\n            interimTranscript = this.concatTranscripts(\n              interimTranscript,\n              event.results[i][0].transcript\n            )\n            newState.interimTranscript = interimTranscript\n          }\n        }\n\n        this.setState(newState)\n      }\n\n      // returns string with all transcript together\n      concatTranscripts(...transcriptParts) {\n        return transcriptParts.map(t => t.trim()).join(' ').trim()\n      }\n\n      resetTranscript = () => {\n        interimTranscript = ''\n        finalTranscript = ''\n        this.disconnect('RESET')\n        this.setState({ \n          interimTranscript, \n          finalTranscript,\n          transcriptData: newTranscriptData(),\n          speechTimerStartedAt: false,\n        })\n      }\n\n      startListening = () => {\n        if (recognition && !listening) {\n          try {\n            recognition.start()\n          } catch (DOMException) {\n            // Tried to start recognition after it has already started - safe to swallow this error\n          }\n          listening = true\n          let newState = {listening}\n          if (!this.state.speechTimerStartedAt) {\n            newState.speechTimerStartedAt = Date.now()\n          }\n\n          this.setState(newState)\n        }\n      }\n\n      abortListening = () => {\n        listening = false\n        this.setState({ listening })\n        this.disconnect('ABORT')\n      }\n\n      stopListening = () => {\n        listening = false\n        this.setState({ listening })\n        this.disconnect('STOP')\n      }\n\n      render() {\n        // includes both\n        const transcript = this.concatTranscripts(\n          finalTranscript,\n          interimTranscript\n        )\n\n        const totalTimeElapsed = this.minElapsed()\n\n        return (\n          <WrappedComponent\n            resetTranscript={this.resetTranscript}\n            startListening={this.startListening}\n            abortListening={this.abortListening}\n            stopListening={this.stopListening}\n            transcript={transcript}\n            recognition={recognition}\n            allResults={this.state.allResults}\n            listening={this.state.listening}\n            transcriptData={this.state.transcriptData}\n            interimTranscript={this.state.interimTranscript}\n            finalTranscript={this.state.finalTranscript}\n            browserSupportsSpeechRecognition={browserSupportsSpeechRecognition}\n            totalTimeElapsed={totalTimeElapsed}\n            {...this.props} />\n        )\n      }\n    }\n  }\n\n  if (typeof options === 'function') {\n    return SpeechRecognitionInner(options)\n  } else {\n    return SpeechRecognitionInner\n  }\n}\n","import React, { Component } from \"react\";\n// import getAudio from './getAudio'\nimport SpeechRecognition from \"../updated-react-speech-recognition/src/\";\nimport {\n  secondsToTimecode,\n  timecodeToSeconds,\n} from \"../Util/timecode-converter/index\";\nimport \"./style.css\";\n\nimport { Editor, EditorState, SelectionState, Modifier } from \"draft-js\";\n\n/*\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool\n}\n*/\n\nclass GenerateTranscript extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [],\n      editorState: EditorState.createEmpty(),\n    };\n    this.onChange = (editorState) => this.setState({ editorState });\n\n    this.stop = this.stop.bind(this);\n    this.pause = this.pause.bind(this);\n    this.start = this.start.bind(this);\n    this.reset = this.reset.bind(this);\n\n    // props.recognition.onresult\n    // set default language to Khmer TODO add options?\n    // https://www.science.co.il/language/Locale-codes.php for codes\n    props.recognition.lang = \"en\"; //\"km\";\n  }\n  componentDidMount() {\n    this.setState({\n      editorState:  EditorState.moveFocusToEnd(this.state.editorState), // EditorState imported from draft-js\n    });\n  }\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.playingWhileListening &&\n      !prevProps.playingWhileListening &&\n      !this.props.listening\n    ) {\n      this.props.startListening();\n    }\n  }\n  insertAtCursor(text) {\n    const editorState = this.state.editorState;\n    // get current editor state\n    const currentContent = editorState.getCurrentContent();\n\n    // create new selection state where focus is at the end\n    const selection = editorState.getSelection();\n    //insert text at the selection created above\n    const textWithInsert = Modifier.insertText(\n      currentContent,\n      selection,\n      text,\n      null\n    );\n    const editorWithInsert = EditorState.push(\n      editorState,\n      textWithInsert,\n      \"insert-characters\"\n    );\n\n    this.setState({\n      editorState: editorWithInsert,\n    });\n  }\n  stop(e) {\n    this.props.stopListening();\n    this.insertAtCursor(this.props.finalTranscript + \" \");\n    this.props.resetTranscript();\n  }\n  pause(e) {\n    this.props.stopListening();\n  }\n  start(e) {\n    this.props.startListening();\n  }\n  \n  reset(e) {\n    this.props.stopListening();\n    this.props.resetTranscript();\n  }\n  render() {\n    const {\n      transcript,\n      browserSupportsSpeechRecognition,\n      // interimTranscript,\n      listening,\n      // allResults\n    } = this.props;\n\n    if (!browserSupportsSpeechRecognition) {\n      // NOTE happens several times, as this gets rerendered for some reason. Returns false even when browser can support sometimes for some reason too, but eventually returns true\n      return null;\n    }\n    //TODO add back in once we switch over to using my fork  which passes down all results as an array rather than compiling all into a string\n\n    return (\n      <div>\n        <h1>Speech Recognition</h1>\n        <button onClick={this.reset} onMouseDown={e => e.preventDefault()}>Reset</button>\n        <button onClick={this.start} onMouseDown={e => e.preventDefault()}>Start</button>\n        <button onClick={this.pause} onMouseDown={e => e.preventDefault()}>Pause</button>\n        <button disabled={!this.props.finalTranscript || this.props.finalTranscript !== this.props.transcript} onClick={this.stop} onMouseDown={e => e.preventDefault()}>Insert</button>\n        <br />\n        <div\n          className=\"transcript-container\"\n        >\n          {this.props.transcript}\n        </div>\n        {listening ? (\n          <span>\n            *Listening* Total Time Elapsed:{\" \"}\n            {secondsToTimecode(this.props.totalTimeElapsed)}\n          </span>\n        ) : (\n          <div>&nbsp;</div>\n        )}\n        <Editor editorState={this.state.editorState} onChange={this.onChange} />\n       \n        {false && (\n          <div>\n            <p>Volume</p>\n            <input\n              id=\"volume\"\n              type=\"range\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.1\"\n              value=\"0.5\"\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n// GenerateTranscript.propTypes = propTypes\n\nconst options = {\n  autoStart: false,\n};\nexport default SpeechRecognition(options)(GenerateTranscript);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SttTypeSelect = props => (<select name={ props.name } value={ props.value } onChange={ props.handleChange }>\n  <option value=\"bbckaldi\">BBC Kaldi</option>\n  <option value=\"draftjs\">Draft Js</option>\n  <option value=\"gentle-transcript\" disabled>Gentle Transcript</option>\n  <option value=\"gentle-alignement\" disabled>Gentle Alignement</option>\n  <option value=\"iiif\" disabled>IIIF</option>\n  <option value=\"autoedit2\">autoEdit 2</option>\n  <option value=\"ibm\" disabled>IBM Watson STT</option>\n  <option value=\"speechmatics\">Speechmatics</option>\n  <option value=\"assemblyai\" disabled>AssemblyAI</option>\n  <option value=\"rev\" disabled>Rev</option>\n  <option value=\"srt\" disabled>Srt</option>\n  <option value=\"vtt\" disabled>VTT</option>\n  <option value=\"vtt-youtube\" disabled>Youtube VTT</option>\n</select>);\n\nSttTypeSelect.propTypes = {\n  name: PropTypes.string,\n  value: PropTypes.string,\n  handleChange: PropTypes.func\n};\n\nexport default SttTypeSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ExportFormatSelect = props => (<select name={ props.name } value={ props.value } onChange={ props.handleChange }>\n  <option value=\"draftjs\">Draft Js</option>\n  <option value=\"txt\">Text file</option>\n  <option value=\"html\" disabled>HTML</option>\n  <option value=\"word\" disabled>MS Word</option>\n</select>);\n\nExportFormatSelect.propTypes = {\n  name: PropTypes.string,\n  value: PropTypes.string,\n  handleChange: PropTypes.func\n};\n\nexport default ExportFormatSelect;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport { TranscriptEditor, GenerateTranscript } from './lib';\n\nimport kaldiTedTalkTranscript from './sample-data/KateDarling_2018S-bbc-kaldi.json';\nimport khmerRougeTranscript from './sample-data/khmer-rouge-interview-data.json';\nimport style from './index.module.css';\nimport SttTypeSelect from './select-stt-json-type';\nimport ExportFormatSelect from './select-export-format';\n\n// import khmerRougeInterviewTranscript from './sample-data/khmer-rouge-interview-transcript-data.json';\n\nconst tedTalkVideoUrl = 'https://download.ted.com/talks/KateDarling_2018S-950k.mp4';\nconst khmerRougeInterviewTranscript = 'https://av.voanews.com/Videoroot/Pangeavideo/2019/01/b/b8/b83b37e5-3deb-4668-9daa-b2837648799f.mp4?download=1' // 360px (270, 720, and 1080 available)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transcriptData: null,\n      mediaUrl: null,\n      isTextEditable: true,\n      sttType: 'bbckaldi',\n      analyticsEvents: [],\n      fileName: 'Khmer Transcript Data',\n      playingWhileListening: false,\n    };\n\n    this.transcriptEditorRef = React.createRef();\n    this.startListeningAndPlayingMedia = this.startListeningAndPlayingMedia.bind(this)\n  }\n\n  loadDemo() {\n    this.setState({\n      transcriptData: khmerRougeTranscript,\n      mediaUrl: khmerRougeInterviewTranscript,\n      sttType: 'bbckaldi',\n      fileName: 'transcript-data',\n    });\n  }\n\n  startListeningAndPlayingMedia(e) {\n    this.setState({playingWhileListening: true})\n  }\n\n  // https://stackoverflow.com/questions/8885701/play-local-hard-drive-video-file-with-html5-video-tag\n  handleChangeLoadMedia(files) {\n    console.log(files);\n    const file = files[0];\n    const type = file.type;\n    // check if is playable\n    const videoNode = document.createElement('video');\n    const canPlay = videoNode.canPlayType(type);\n    if (canPlay) {\n      const fileURL = URL.createObjectURL(file);\n      // videoNode.src = fileURL\n      this.setState({\n        // transcriptData: kaldiTedTalkTranscript,\n        mediaUrl: fileURL,\n        fileName: file.name\n      });\n    }\n    else {\n      alert('select a valid audio or video file');\n    }\n  }\n\n  handleChangeLoadMediaUrl() {\n    const fileURL = prompt(\"Paste the URL you'd like to use here\");\n\n    this.setState({\n      // transcriptData: kaldiTedTalkTranscript,\n      mediaUrl: fileURL,\n    });\n  }\n\n  handleChangeLoadTranscriptJson(files) {\n    const file = files[0];\n\n    if (file.type ==='application/json') {\n      const fr = new FileReader();\n\n      fr.onload = (evt) => {\n        this.setState({\n          transcriptData: JSON.parse(evt.target.result)\n        });\n      };\n\n      fr.readAsText(file);\n\n    }\n    else {\n      alert('select a valid json file');\n    }\n  }\n\n  handleIsTextEditable = () => {\n    this.setState((prevState) => ({ isTextEditable: (prevState.isTextEditable) !== true }));\n  }\n\n  // https://stackoverflow.com/questions/21733847/react-jsx-selecting-selected-on-selected-select-option\n  handleSttTypeChange = (event) => {\n    console.log(event.target.name, event.target.value);\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleExportFormatChange = (event) => {\n    console.log(event.target.name, event.target.value);\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  exportTranscript = () => {\n    // eslint-disable-next-line react/no-string-refs\n    const { data, ext } = this.transcriptEditorRef.current.getEditorContent(this.state.exportFormat);\n    this.download(data, `${ this.state.mediaUrl }.${ ext }`);\n  }\n\n  // https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file\n  download = (content, filename, contentType) => {\n    const type = contentType || 'application/octet-stream';\n    const a = document.createElement('a');\n    const blob = new Blob([ content ], { type: type });\n\n    a.href = window.URL.createObjectURL(blob);\n    a.download = filename;\n    a.click();\n  }\n\n   clearLocalStorage = () => {\n     localStorage.clear();\n     console.info('cleared local storage');\n   }\n\n   handleAnalyticsEvents = (event) => {\n     this.setState({ analyticsEvents: [ ...this.state.analyticsEvents, event ] });\n   }\n\n   handleChangeTranscriptName = (value) => {\n     this.setState({ fileName: value });\n   }\n\n   playMedia\n   render() {\n     return (\n       <div className={ style.container }>\n         <span className={ style.title }>\n            Demo page for <mark>Khmer Transcript Creator</mark> - Component |&nbsp;\n           <a\n             href=\"https://github.com/RyanQuey/khmer-react-transcript-creator\"\n             rel=\"noopener noreferrer\"\n             target=\"_blank\"\n           >\n            Github Repo\n           </a>\n         </span>\n         <GenerateTranscript\n           download = { this.download }\n           fileName = {this.state.fileName}\n           playingWhileListening = { this.state.playingWhileListening }\n         />\n         <hr />\n         <label>Load Local Audio or Video Media:&nbsp;</label>\n         <input\n           type=\"file\"\n           onChange={ e => this.handleChangeLoadMedia(e.target.files) }\n         />\n         or&nbsp;\n         <button onClick={ () => this.handleChangeLoadMediaUrl() }>\n          Load Media From Url\n         </button>\n         <br/>\n         <label>Transcript Json Format:&nbsp;</label>\n         <SttTypeSelect\n           name={ 'sttType' }\n           value={ this.state.sttType }\n           handleChange={ this.handleSttTypeChange }\n         />\n         &nbsp;&nbsp;\n         <label>Transcript Json:&nbsp;</label>\n         <input\n           type=\"file\"\n           onChange={ e => this.handleChangeLoadTranscriptJson(e.target.files) }\n         />\n         <br />\n\n         <label>Text Is Editable</label>\n         <label className={ style.switch }>\n           <input type=\"checkbox\"\n             defaultChecked=\"true\"\n             onChange={ this.handleIsTextEditable }\n           />\n           <span className={ style.slider }></span>\n         </label>\n         <br />\n\n         <label>Transcript Name</label>\n         <input\n           type=\"text\"\n           onChange={ e => this.handleChangeTranscriptName(e.target.value) }\n           value={ this.state.fileName }\n         />\n         <br />\n\n         <label>Export Edited Transcript:&nbsp;</label>\n         <button onClick={ () => this.exportTranscript() }>Export</button>\n\n         <ExportFormatSelect\n           name={ 'exportFormat' }\n           value={ this.state.exportFormat }\n           handleChange={ this.handleExportFormatChange }\n         />\n         <br />\n\n         <button onClick={ () => this.clearLocalStorage() }>Clear Local Storage</button>\n         <br />\n         <button onClick={ () => this.loadDemo() }>load demo</button>\n         <br />\n         {this.state.mediaUrl &&\n           <button onClick={ () => this.startListeningAndPlayingMedia() }>Play From Start While Listening</button>\n         }\n         <hr/>\n\n         <TranscriptEditor\n           transcriptData = { this.state.transcriptData }\n           fileName = { this.state.fileName }\n           mediaUrl = { this.state.mediaUrl }\n           isEditable = { this.state.isTextEditable }\n           sttJsonType = { this.state.sttType }\n           handleAnalyticsEvents = { this.handleAnalyticsEvents }\n           ref = { this.transcriptEditorRef }\n           playingWhileListening = { this.state.playingWhileListening }\n         />\n         <hr/>\n\n         { false && \"TODO not worrying about right now\" && <div>\n           <label>Components Analytics</label>\n           <textarea\n             style={ { height: '200px', width: '100%' } }\n             value={ JSON.stringify(this.state.analyticsEvents, null, 2) }\n             disabled>\n           </textarea>\n         </div> }\n       </div>\n     );\n   }\n}\n\nrender(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-lightest-grey\":\"#f2f2f2\",\"color-labs-red\":\"#a0372d\",\"color-dark-grey\":\"#4a4a4a\",\"shortcuts\":\"Shortcuts_shortcuts__36w36\",\"header\":\"Shortcuts_header__lub6K\",\"closeButton\":\"Shortcuts_closeButton__IyOxU\",\"list\":\"Shortcuts_list__vsTfx\",\"listItem\":\"Shortcuts_listItem__cz3gw\",\"shortcut\":\"Shortcuts_shortcut__2GJWX\",\"shortcutLabel\":\"Shortcuts_shortcutLabel__2G5gv\",\"settingElement\":\"Shortcuts_settingElement__2N2tx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-subt-green\":\"#69e3c2\",\"color-darkest-grey\":\"#282828\",\"color-labs-red\":\"#a0372d\",\"container\":\"TranscriptEditor_container__3Y8ka\",\"header\":\"TranscriptEditor_header__3xp7y\",\"main\":\"TranscriptEditor_main__1fQPR\",\"aside\":\"TranscriptEditor_aside__2kF6-\",\"settingsContainer\":\"TranscriptEditor_settingsContainer__1wxA-\",\"settingsButton\":\"TranscriptEditor_settingsButton__2SLMt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-light-grey\":\"#767676\",\"topSection\":\"MediaPlayer_topSection__1NM9G\",\"playerSection\":\"MediaPlayer_playerSection__2bT8Q\",\"controlsSection\":\"MediaPlayer_controlsSection__2Zlvk\",\"titleBox\":\"MediaPlayer_titleBox__eUi5o\",\"title\":\"MediaPlayer_title__1xa4N\",\"helpText\":\"MediaPlayer_helpText__2YDCy\",\"hideInMobile\":\"MediaPlayer_hideInMobile__b9BhP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-labs-red\":\"#a0372d\",\"switchContainer\":\"VolumeControl_switchContainer__1IhdW\",\"label\":\"VolumeControl_label__1AKJ2\",\"switch\":\"VolumeControl_switch__1uz-h\",\"slider\":\"VolumeControl_slider__1IaHd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"offsetContainer\":\"TimecodeOffset_offsetContainer__jCttp\",\"inputBox\":\"TimecodeOffset_inputBox__70Ff-\",\"button\":\"TimecodeOffset_button__3FwLx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"src_container__uc_5O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-labs-red\":\"#a0372d\",\"switchContainer\":\"Toggle_switchContainer__MBfQP\",\"label\":\"Toggle_label__BjsKI\",\"switch\":\"Toggle_switch__jUVop\",\"slider\":\"Toggle_slider__1rhPm\"};"],"sourceRoot":""}